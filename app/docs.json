{"readme":{},"cli-basics":{"markdown":"\n\nWelcome!\n\nIn this tutorial, we're going to walk through the basics of the Blockstack command line interface.\n\n### Lookups\n\nNow, to perform a name lookup, run this command:\n\n```bash\n$ blockstack lookup timblee.id\n```\n\nYou should get a response like this:\n\n```\n{\n    \"profile\": {\n        \"@type\": \"Person\", \n        \"account\": [\n            {\n                \"@type\": \"Account\", \n                \"identifier\": \"timbl\", \n                \"proofType\": \"http\", \n                \"proofUrl\": \"https://gist.github.com/timbl/04e8ac7c81cd2dee2f51a5e8c672188d\", \n                \"service\": \"github\"\n            }, \n            {\n                \"@type\": \"Account\", \n                \"identifier\": \"timberners_lee\", \n                \"proofType\": \"http\", \n                \"proofUrl\": \"https://twitter.com/timberners_lee/status/740677355950080001\", \n                \"service\": \"twitter\"\n            }\n        ], \n        \"image\": [\n            {\n                \"@type\": \"ImageObject\", \n                \"contentUrl\": \"https://s3.amazonaws.com/97p/lUU.jpeg\", \n                \"name\": \"cover\"\n            }\n        ]\n    }, \n    \"zonefile\": \"$ORIGIN timblee.id\\n$TTL 3600\\n_http._tcp URI 10 1 \\\"https://blockstack.s3.amazonaws.com/timblee.id\\\"\\n\"\n}\n```\n\n### Price Estimations\n\nEvery name costs a certain amount of money to register, and each namespace has it's own name pricing rules.\n\nAs an example, in the `.id` namespace 6-letter alphabetic-only names cost 0.001 bitcoins, but with every additional letter the names get 4x cheaper and with every fewer letter the names get 4x more expensive. In addition, names without vowels and names with numbers and special characters get a special discount.\n\nTo determine how much a name will cost to order a name (including all transaction fees), use the `price` command:\n\n```bash\n$ blockstack price <YOUR NAME>.id\n```\n\nExample response:\n\n```json\n{\n    \"name_price\": {\n        \"btc\": \"0.00025\", \n        \"satoshis\": \"25000\"\n    }, \n    \"preorder_tx_fee\": {\n        \"btc\": \"0.00047406\", \n        \"satoshis\": \"47406\"\n    }, \n    \"register_tx_fee\": {\n        \"btc\": \"0.00046184\", \n        \"satoshis\": \"46184\"\n    }, \n    \"total_estimated_cost\": {\n        \"btc\": \"0.00188394\", \n        \"satoshis\": \"188394\"\n    }, \n    \"update_tx_fee\": {\n        \"btc\": \"0.00069804\", \n        \"satoshis\": \"69804\"\n    }\n}\n```\n\n### Deposits\n\nName registrations and name management operations cost money, so before you can do these things, you'll need to deposit bitcoins in your account.\n\n*Note that in some cases you'll need to wait for one or more confirmations (about 10-60 minutes) before the Blockstack CLI will register the funds as fully deposited and allow you to proceed with registering names.*\n\nTo get the Bitcoin address where you should deposit your bitcoins, run the `deposit` command:\n\n```bash\n$ blockstack deposit\n```\n\nExample response:\n\n```json\n{\n    \"address\": \"13aUoeUtQnHUTfRwbksKvyvMRMzN3Qf2iR\",\n    \"message\": \"Send bitcoins to the address specified.\"\n}\n```\n\n### Registrations\n\nAfter you get comfortable with looking up names, take the next step and register and manage a name for yourself. Run the following command:\n\n```bash\n$ blockstack register <YOUR NAME>.id\n```\n\nIf the name hasn't been registered yet, you'll get a confirmation that your registration is pending:\n\n```json\n{\n    \"success\": true,\n    \"transaction_hash\": \"f576313b2ff4cc7cb0d25545e1e38e2d0d48a6ef486b7118e5ca0f8e8b98ae45\",\n    \"message\": \"The name has been queued up for registration and will take a few hours to go through. You can check on the status at any time by running 'blockstack info'.\"\n}\n```\n\nAfter a few hours, your registration should go through and you'll be able to update your DNS records for the name.\n\n### Updates\n\nTo update the data record associated with a name you own, run the `blockstack update` command:\n\n```bash\n$ cat > new_zone_file.txt <<EOF\n\\$ORIGIN swiftonsecurity.id\n\\$TTL 3600\npubkey TXT \"pubkey:data:04cabba0b5b9a871dbaa11c044066e281c5feb57243c7d2a452f06a0d708613a46ced59f9f806e601b3353931d1e4a98d7040127f31016311050bedc0d4f1f62ff\"\n_file IN URI 10 1 \"file:///Users/TaylorSwift/.blockstack/storage-disk/mutable/swiftonsecurity.id\"\n_https._tcp IN URI 10 1 \"https://blockstack.s3.amazonaws.com/swiftonsecurity.id\"\n_http._tcp IN URI 10 1 \"http://node.blockstack.org:6264/RPC2#swiftonsecurity.id\"\n_dht._udp IN URI 10 1 \"dht+udp://fc4d9c1481a6349fe99f0e3dd7261d67b23dadc5\"\nEOF\n\n$ blockstack update swiftonsecurity.id new_zone_file.txt\n```\n\nExpected response:\n\n```json\n{\n    \"success\": true,\n    \"transaction_hash\": \"4e1f292c09ad8e03a5f228b589d9a7dc3699b495862bee3b40f2432ac497b134\",\n    \"message\": \"The name has been queued up for update and will take ~1 hour to process. You can check on the status at any time by running 'blockstack info'.\"\n}\n```\n","title":"CLI Basics","description":"Walk through the basics of the command line interface, like looking up names, getting name prices, and registering names.","image":"/images/article-photos/chalkboard.jpg","youtube":"https://www.youtube.com/embed/GWjEGlb1aEs"},"hello-blockstack":{"markdown":"\n\nWelcome!\n\nIn this tutorial, we're going to walk through building a simple application on Blockstack.\n\nThis app will be a single-page application (SPA) that runs completely client-side. It will have no backend API to talk to, other than the identity and storage API that the user provides. In this sense, it will be a completely decentralized, server-less application.\n\nFor this tutorial, we will use the following tools:\n\n- `npm` to manage dependencies and scripts\n- `browserify` to compile node code into browser-ready code\n- `blockstack.js` to authenticate the user and work with the user's identity/profile information\n\n### Part 1: Installation & Generation\n\nFirst, install Yeoman (a popular app generation tool) along with the Blockstack App Generator:\n\n```bash\nnpm install -g yo generator-blockstack\n```\n\nNext, create a directory for the application and enter into that directory:\n\n```bash\nmkdir hello-blockstack && cd hello-blockstack\n```\n\nThen, use the Blockstack App Generator to generate a simple Blockstack app:\n\n```bash\nyo blockstack\n```\n\nAfter you respond to the prompts, the app generator will create all of the app files and then install all dependencies.\n\n### Part 2: Serving the App\n\nStart the development static file server to serve the app locally\n\n```bash\nnpm run start\n```\n\nThe simple static file server can be found in `server.js`.\n\nThis server will serve all of the files in the `/public` directory, including `index.html`, `app.js`, `bootstrap.min.css` and `app.css`.\n\n### Part 3: Main App Code\n\nThe main file of our app is called `app.js` (in the `/public` folder). This is where the majority of the logic is contained.\n\nAs you can see, all of the code in the file is wrapped in an event listener that waits until the DOM content has been loaded:\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n})\n```\n\nInside of this, we have a sign in button handler that creates an auth request and redirects the user to sign in:\n\n```js\ndocument.getElementById('signin-button').addEventListener('click', function() {\n  blockstack.redirectUserToSignIn()\n})\n```\n\nWe also have a sign out button handler that deletes the local user data and signs the user out:\n\n```js\ndocument.getElementById('signout-button').addEventListener('click', function() {\n  blockstack.signUserOut(window.location.origin)\n})\n```\n\nNext, we have a function for showing the user's profile:\n\n```js\nfunction showProfile(profile) {\n  var person = new blockstack.Person(profile)\n  document.getElementById('heading-name').innerHTML = person.name()\n  document.getElementById('avatar-image').setAttribute('src', person.avatarUrl())\n  document.getElementById('section-1').style.display = 'none'\n  document.getElementById('section-2').style.display = 'block'\n}\n```\n\nThen, we have logic for signing the user in and displaying the application.\n\nNote that there are 3 main states the user can be in:\n\n- The user is already signed in\n- The user has a sign in request that is pending\n- The user is signed out\n\nWe express that as follows:\n\n```js\nif (blockstack.isUserSignedIn()) {\n  // Show the user's profile\n} else if (blockstack.isSignInPending()) {\n  // Sign the user in\n} else {\n  // Do nothing\n}\n```\n\nWith the first condition (when the user is signed in), we load the user data from local storage and then display the profile. With the second condition (when the user has a pending sign in request), we sign the user in and redirect the user back to the home page.\n\n```js\nif (blockstack.isUserSignedIn()) {\n  var profile = blockstack.loadUserData().profile\n  showProfile(profile)\n} else if (blockstack.isSignInPending()) {\n  blockstack.handlePendingSignIn().then(function(userData) {\n    window.location = window.location.origin\n  })\n}\n```\n\n### Part 4: App Manifest\n\nThe app manifest file (`/public/manifest.json`) contains configurations for your app that dictate how it will be displayed in auth views and on user home screens.\n\nThe `manifest.json` file should look like this:\n\n```json\n{\n  \"name\": \"Hello, Blockstack\",\n  \"start_url\": \"localhost:5000\",\n  \"description\": \"A simple demo of Blockstack Auth\",\n  \"icons\": [{\n    \"src\": \"https://helloblockstack.com/icon-192x192.png\",\n    \"sizes\": \"192x192\",\n    \"type\": \"image/png\"\n  }]\n}\n```\n\nKeep it as is or fill it in with new information that describes your app.\n\n### Part 5: Source Control\n\nTo complete the tutorial, save your app code by pushing it to GitHub.\n\nFirst, create a simple git repo:\n\n```bash\ngit init\n```\n\nNext, add and commit all of the files:\n\n```bash\ngit add . && git commit -m \"first commit\"\n```\n\nThen, create a new repo on GitHub and name it \"hello-blockstack\":\n\n> https://github.com/new\n\nAfter that, add the remote repo to your local git repo. Make sure to fill in your username:\n\n```bash\ngit remote add origin git@github.com:YOUR_USERNAME_HERE/hello-blockstack.git\n```\n\nLast, push all of the code to the master branch of the remote repo:\n\n```\ngit push origin master\n```\n\nYou're done! You just built your first Blockstack app and shipped the code.\n\nYou're well on your way to becoming a Blockstack app legend.\n","title":"Hello, Blockstack Tutorial","description":"Tutorial on building a hello world application.","image":"/images/visuals/hello-blockstack-tutorial.png","youtube":"https://www.youtube.com/embed/UbZ6PlX5rF8"},"managing-data-with-gaia":{"markdown":"\n\nIf you’ve gone through tutorials and documentation for blockstack.js and Gaia, you’ll know the `blockstack.js` interface is dead simple. First, you authenticate a user into your app. Once that’s complete, you’re free to read and write app data in the user’s storage provider with two data operations:\n\n\n- `putFile`: Writes to a specified path\n- `getFile`: Gets the file at a specified path\n\nThat’s it. You’re reading files and you’re writing files. All file types are supported, so you can choose to manage data with sql, markdown, json, or even your own custom format! Gaia operations are purposefully left primitive so that you have complete control over which tools you use on top. In the future, we imagine a variety of data management libraries will emerge that wrap Gaia and help you interact with your data layer via expressive APIs.\n\nIf you’re anything like most developers, you’re probably used to working with highly abstracted libraries that offer collection management, querying, pagination, documented schema models, and more. Developing apps on Blockstack is thrilling because you quickly learn that you don’t need training wheels. You can create a meaningful and complex data layer using two methods: `putFile` and `getFile`. This limited interface forces you to think about your fundamental data architecture and make some decisions about how you’re modeling data to gain back the benefits you get with large frameworks.\n\nThis series will focus on teaching you to think like a Blockstack developer working with Gaia. Let’s get started!\n\n\n## Working with Data Collections\n\nFor the purposes of this tutorial, let’s pretend that we’re building a simple grocery list app called Grublist. As a user of Grublist, you should be able to create, read, update, and delete grocery lists.\n\nLet’s think in terms of JSON since it’s easy and familiar.\n\n### Single-File Collection Approach\n\nHere’s a Single-File Collection approach to modeling our data:\n\n```\n// grocerylists.json\n{\n  \"3255\": {\n    \"items\": [\n      \"1 Head of Lettuce\",\n      \"Haralson apples\"\n    ]\n  },\n  // ...more lists with items\n}\n```\n\nNotice that items are stored as an array nested inside of each grocery list.\n\nThis is conceptually the simplest way to manage your grocery lists. It’s very easy to wrap your brain around what’s going on with the data. When you read the `/grocerylists.json` file, you get back exactly what you need: grocery lists and their items. When you write, you’re always writing to one place.\n\nThere is one caveat to this approach that you should seriously consider: Every time you update one of your grocery lists in any way, you’re overwriting the entire file of all your grocery lists. This is because using the `putFile` method will overwrite anything at `/grocerylists.json` if it exists, so if you’re doing a write operation for a new grocery list, you must submit all previous grocery lists plus the new grocery list.\n\nThat’s actually kind of scary, especially considering this code is running on the client where anything can go wrong. Imagine your client-side code encounters a parsing error with a user-input value and you overwrite two years worth of a user’s grocery lists with:\n\n\n```\n\"line 6: Parsing Error: Unexpected token .\"\n```\n\n\n**To summarize the Single-File Collection approach:**\n\nPros:\n\n- **Simplified reads**: Just request a single file and get back a list of all your data.\n- **Simplified writes**: Some people might be more comfortable working with a Javascript array of items on the client.\n\nCons:\n\n- **Pagination is impossible**: Using a simple storage strategy like this, you have no choice but to download the entire file of all grocery lists. A user could have 1000 grocery lists, and every time they enter your app they would be forced to download all 1000 grocery lists worth of data.\n- **Too heavy-handed**: This is the issue I mentioned above about overwriting an entire file of all grocery lists. Generally, you should try to avoid managing entire collections of data at a time.\n- **Less control over file permissions**: You’ll need to perform data acrobatics if you want to share only a single grocery list with a trusted party.\n\n\n### Multi-File Collection Approach\n\nIt would be great if we could split out grocery lists into their own files to minimize the risk of destroying all the user’s grocery list data and make it easier to paginate the lists.\n\nHere’s a diagram of a Multi-File Collection approach:\n\n\n<img src=\"/images/tutorials/grocery-lists.png\" style=\"max-width: 80%;\" />\n\n\nWith this approach, we maintain an index file that stores an array of list IDs. Each list ID is predictably the name of a file under a `grocerylists` folder.\n\n\n**To summarize the Multi-File Collection approach:**\n\nPros:\n\n- **Performant pagination**: Just request the `grocerylists.json` file, and from there you can request as many of the collection items as you need.\n- **Less risk of data corruption**: By only manipulating one grocery list at a time, you can guarantee that if something goes wrong with your write operation, it won’t affect the other grocery list data. You might say, “but I still need to overwrite the list of IDs every time I operate.” That’s true, but you can optimize your code so that you’re only updating that file when you add or remove a grocery list. Managing a list of IDs is also much more manageable than a big list of user input data.\n- **More control over file permissions**: If you wanted to share only a single grocery list with a trusted party, it’s much easier to do when the list data is isolated to its own file.\n\nCons\n\n- **More network requests**: If you have 10 grocery lists and want to fetch them all, you’re going to be making 11 network requests. Using HTTP/2 and requesting limited items at a time will help with performance.\n- **More complex architecture**: Rather than simply requesting the file of all your data, you now have to request each item individually and stitch them all together once all requests have finished.\n\n\n### Implementing these approaches\n\nWe’ve shown you conceptually how you might think about organizing your data, but you have not seen much implementation code. Check out the sandbox linked below for an implementation of services that can accommodate either the single-file or multi-file approaches for all of your collections.\n\nNote that we’ve included an interstitial “driver” layer for a few reasons:\n\n1. In the sandbox, we’re swapping out the Blockstack driver for a localstorage driver for demonstration purposes.\n2. It’s good practice to have all data flow through an interface you control, so that you can add logging or perform other operations.\n3. If the `blockstack.js` API changes in the future, you can update your code once in the driver.\n4. You can DRY up your code by declaring the Gaia config once per collection.\n\nClick the button below to spin up a sandbox environment:\n\n[![](/images/tutorials/edit-sandbox.png)](https://codesandbox.io/s/8kzmjjr9nj)\n\n\n## Summary\n\nThere are many valid ways to organize your data and you should pick what makes the most sense for your needs. I would recommend using a single-file collection approach for predictably small collections of data. For larger collections, the risk of data corruption is too high to be passing around entire collections worth of data with one `putFile` request, so opt for an architecture that looks more like the multi-file collection model.\n\nMost importantly, feel free to experiment with data architecture. There are concepts and patterns you can introduce into this process that can help you validate schema, migrate data, and more. Check out more of our tutorials for a deeper dive into developing a sample app.\n","title":"Managing Data with Gaia","description":"This series will focus on teaching you to think like a Blockstack developer working with Gaia.","image":"/images/tutorials/managing-data-with-gaia.png"},"multi-player-storage":{"markdown":"\n\nIn this tutorial, we're going to build a decentralized micro-blogging application using multi-player Gaia storage.\n\nThis app will be a React.js application that is completely decentralized and server-less. Identity and storage services will be provided by `blockstack.js`\n\nThe app will be able to do the following:\n\n- Authenticate users using Blockstack\n- Post new statuses\n- Display statuses in the user profile\n- Lookup other users and see their profile and statuses\n\nWe will be using the following tools:\n\n- `npm` to manage dependencies and scripts\n- `yo` to generate boilerplate for a Blockstack React app\n- `blockstack.js` to authenticate the user and access Gaia storage\n\nFor experienced Blockstack developers, the TL;DR:\n\n- Add the `publish_data` scope to sign in requests\n- Use `getFile('filename.json', { username: 'username.id', decrypt: false })` to read a file from another user.\n- Use `lookupProfile('username.id')` to lookup user profiles\n- Use `putFile('filename.json', file, options)` as before where `options` is set to `{ encrypt: false }` so\nthat encryption is disabled and others can read your file.\n\n### Installation & Generation\n\nFirst, install Yeoman along with the Blockstack App Generator:\n\n```bash\nnpm install -g yo generator-blockstack\n```\n\nNext, create a directory for our application. We will call our app Publik:\n\n```bash\nmkdir publik && cd publik\n```\n\nThen, use the Blockstack React App Generator to generate a simple Blockstack app:\n\n```bash\nyo blockstack:react\n```\n\nAfter you respond to the prompts, the app generator will create all of the app files and then install all dependencies.\n\nTo run the app locally:\n\n```bash\nnpm start\n```\n\nAnd open your browser to `http://localhost:8080`. You should now see a simple React app that you can sign in to using your Blockstack ID. We covered how authentication works in depth in a previous tutorial. ([Blockstack Todos Tutorial](/tutorials/todo-list))\n\n### Multi-player Storage Scope\n\nIn multi-player storage, user files stored on Gaia are made visible to others via the `apps` property in the user's `profile.json` file. Every app that uses multi-player storage must add itself to the user's `profile.json` file. The Blockstack Browser will handle this part automatically when the `publish_data` scope is requested during authentication.\n\nSo the first thing we need to do is modify our authentication request to include the `publish_data` scope.\n\nOpen `src/components/App.jsx` and locate the sign in handler method:\n\n```javascript\nhandleSignIn(e) {\n  e.preventDefault();\n  redirectToSignIn();\n}\n```\n\nModify the method to this:\n\n```javascript\nhandleSignIn(e) {\n  e.preventDefault();\n  const origin = window.location.origin\n  redirectToSignIn(origin, origin + '/manifest.json', ['store_write', 'publish_data'])\n}\n```\n\n*Note that by default, authentication requests include the `store_write` scope which enables storage.*\n\nIf you log out and sign in again, the authentication request will now prompt the user for permission to publish data stored for our app.\n\n![Multi-reader storage authentication](/images/tutorials/multi-player-storage-auth.png)\n\n### Posting Statuses\n\nIn this step, we will add functionality to allow posting and displaying of \"statuses\".\n\nLet's open `src/components/Profile.jsx` and import several methods that we'll be using from `blockstack.js`. These methods are `putFile()`, `getFile()` and `lookupProfile()`. Add them to the import statement for `blockstack` near the top of the file:\n\n```javascript\nimport {\n  isSignInPending,\n  loadUserData,\n  Person,\n  getFile,\n  putFile,\n  lookupProfile\n} from 'blockstack';\n```\n\nThen, we'll need to add a few properties to the the initial state in `constructor()`. Your constructor should look like this:\n\n```javascript\nconstructor(props) {\n  super(props);\n\n  this.state = {\n    person: {\n      name() {\n        return 'Anonymous';\n      },\n      avatarUrl() {\n        return avatarFallbackImage;\n      },\n    },\n    username: \"\",\n    newStatus: \"\",\n    statuses: [],\n    statusIndex: 0,\n    isLoading: false    \n  };\n}\n```\n\n\nNow let's modify the `render()` method to add a text input and submit button so that we can post statuses. Replace the `render()` method with the following:\n\n```javascript\nrender() {\n  const { handleSignOut } = this.props;\n  const { person } = this.state;\n  const { username } = this.state;\n\n  return (\n    !isSignInPending() && person ?\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-offset-3 col-md-6\">\n          <div className=\"col-md-12\">\n            <div className=\"avatar-section\">\n              <img\n                src={ person.avatarUrl() ? person.avatarUrl() : avatarFallbackImage }\n                className=\"img-rounded avatar\"\n                id=\"avatar-image\"\n              />\n              <div className=\"username\">\n                <h1>\n                  <span id=\"heading-name\">{ person.name() ? person.name()\n                    : 'Nameless Person' }</span>\n                  </h1>\n                <span>{username}</span>\n                <span>\n                  &nbsp;|&nbsp;\n                  <a onClick={ handleSignOut.bind(this) }>(Logout)</a>\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"new-status\">\n            <div className=\"col-md-12\">\n              <textarea className=\"input-status\"\n                value={this.state.newStatus}\n                onChange={e => this.handleNewStatusChange(e)}\n                placeholder=\"What's on your mind?\"\n              />\n            </div>\n            <div className=\"col-md-12\">\n              <button\n                className=\"btn btn-primary btn-lg\"\n                onClick={e => this.handleNewStatusSubmit(e)}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div> : null\n  );\n}\n```\n\nIn the `render()` method above, we're also displaying the Blockstack ID of the user. We'll need to extract this from the user profile data. Locate the `componentWillMount()` method and add the username property below the person property:\n\n\n```javascript\ncomponentWillMount() {\n  this.setState({\n    person: new Person(loadUserData().profile),\n    username: loadUserData().username\n  });\n}\n```\n\nNext, we'll add two methods to handle our input events:\n\n```javascript\nhandleNewStatusChange(event) {\n  this.setState({newStatus: event.target.value})\n}\n\nhandleNewStatusSubmit(event) {\n  this.saveNewStatus(this.state.newStatus)\n  this.setState({\n    newStatus: \"\"\n  })\n}\n```\n\nAnd a method to perform the required storage operations to save our new statuses:\n\n```javascript\nsaveNewStatus(statusText) {\n  let statuses = this.state.statuses\n\n  let status = {\n    id: this.state.statusIndex++,\n    text: statusText.trim(),\n    created_at: Date.now()\n  }\n\n  statuses.unshift(status)\n  const options = { encrypt: false }\n  putFile('statuses.json', JSON.stringify(statuses), options)\n    .then(() => {\n      this.setState({\n        statuses: statuses\n      })\n    })\n}\n```\n\nNow you should be able to type a status in the text box and save it by pressing the submit button.\n\nYou'll see that nothing happens when you press the submit button. Because we haven't added any code to display the statuses.\n\n### Display Statuses\n\nGo back to the `render()` method and add the following block right below the `div` element containing the text input and submit button.\n\n```javascript\n<div className=\"col-md-12 statuses\">\n  {this.state.isLoading && <span>Loading...</span>}\n  {this.state.statuses.map((status) => (\n      <div className=\"status\" key={status.id}>\n        {status.text}\n      </div>\n    )\n  )}\n</div>\n```\n\nWe also need to fetch statuses on page load, so let's add a new method called `fetchData()` and call it from the `componentDidMount()` method\n\n```javascript\n\ncomponentDidMount() {\n  this.fetchData()\n}\n\nfetchData() {\n  this.setState({ isLoading: true })\n  const options = { decrypt: false }\n  getFile('statuses.json', options)\n    .then((file) => {\n      var statuses = JSON.parse(file || '[]')\n      this.setState({\n        person: new Person(loadUserData().profile),\n        username: loadUserData().username,\n        statusIndex: statuses.length,\n        statuses: statuses,\n      })\n    })\n    .finally(() => {\n      this.setState({ isLoading: false })\n    })\n}\n```\n\nAt this point we have a basic micro-blogging app that we can use to post and view statuses. However, there's no way to view other users' statuses. We'll get to the multi-player part in the next steps. But first, let's take a moment to pretty up our app.\n\nOpen `src/styles/style.css` and replace the existing styles with the following:\n\n\n```css\n/* Globals */\na,a:focus,a:hover{color:#fff;}\nhtml,body{height:100%;text-align:center;background-color:#191b22;}\nbody{color:#fff}\n.hide{display:none;}\n.landing-heading{font-family:'Lato',Sans-Serif;font-weight:400;}\n\n/* Buttons */\n.btn{font-family:'Lato',Sans-Serif;padding:0.5625rem 2.5rem;font-size:0.8125rem;font-weight:400;line-height:1.75rem;border-radius:0!important;-webkit-transition:all .2s ease-in-out;-moz-transition:all .2s ease-in-out;-ms-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}\n.btn-lg{font-size:1.5rem;padding:0.6875rem 3.4375rem;line-height:2.5rem;}\n.btn:focus,.btn:active:focus,.btn.active:focus{outline:none;}\n.btn-primary{color:#fff;border:1px solid #2C96FF;background-color:#2C96FF;}\n.btn-primary:hover,.btn-primary:focus,.btn-primary:active{color:#fff;border:1px solid #1a6ec0;background-color:#1a6ec0;}\n\n/* Avatar */\n.avatar{width:100px;height:100px;}\n.avatar-section{margin-bottom:25px;display:flex;text-align:left;}\n.username{margin-left:20px;}\n\n/* Scaffolding */\n.site-wrapper{display:table;width:100%;height:100vh;min-height:100%;}\n.site-wrapper-inner{display:flex;flex-direction:column;justify-content:center;margin-right:auto;margin-left:auto;width:100%;height:100vh;}\n.panel-authed{padding:0 0 0 0;}\n\n/* Home button */\n.btn-home-hello{position:absolute;font-family:'Source Code Pro',monospace;font-size:11px;font-weight:400;color:rgba(255,255,255,0.85);top:15px;left:15px;padding:3px 20px;background-color:rgba(255,255,255,0.15);border-radius:6px;-webkit-box-shadow:0px 0px 20px 0px rgba(0,0,0,0.15);-moz-box-shadow:0px 0px 20px 0px rgba(0,0,0,0.15);box-shadow:0px 0px 20px 0px rgba(0,0,0,0.15);}\n\n/* Input */\ninput, textarea{color:#000;padding:10px;}\n.input-status{width:100%;height:70px;border-radius:6px;}\n.new-status{text-align:right;}\n\n/* Statuses */\n.statuses{padding-top:30px;}\n.status{margin:15px 0px;padding:20px;background-color:#2e2e2e;border-radius:6px}\n```\n\nIf everything went well, we should end up with something like this:\n\n![Multi-reader storage authentication](/images/tutorials/multi-player-storage-status.png)\n\n### User Profile Lookup\n\nLet's now modify our `Profile.jsx` to display profiles of other users. We'll be using the `lookupProfile()` method provided by `blockstack.js` which we added to our import statement earlier. `lookupProfile()` takes a single parameter that is the Blockstack ID of the profile you want to look up and returns a profile object.\n\nFirst, we'll make some changes to the routing structure of our app so that we can view other users' profiles by visiting `http://localhost:8080/other_user.id`\n\nInstall `react-router`:\n\n```bash\nnpm install --save react-router-dom\n```\n\nOpen `src/index.js` and add to the top of the file:\n```javascript\nimport { BrowserRouter } from 'react-router-dom'\n```\n\nNext, change the `ReactDOM.render()` method in `src/index.js` to:\n```javascript\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n```\n\nThen we'll need to go back to `src/components/App.jsx` and add the new route.\nOpen `src/components/App.jsx` and import the `Switch` and `Route` components from `react-router-dom`:\n\n```javascript\nimport { Switch, Route } from 'react-router-dom'\n```\n\nNext, locate the line below in the `render()` method:\n```javascript\n: <Profile handleSignOut={ this.handleSignOut } />\n```\n\nAnd replace it with the following:\n\n```javascript\n  :\n  <Switch>\n    <Route\n      path='/:username?'\n      render={\n        routeProps => <Profile handleSignOut={ this.handleSignOut } {...routeProps} />\n      }\n    />\n  </Switch>\n```\n\nThis sets up a route and captures the route parameter to be used as the profile lookup username.\n\nWe'll also need to add a rule to our webpack config so that we can properly process URL paths that contain the `.` character. e.g. `http://localhost:8080/other_user.id` *Note: In a production app, the web server needs to be configured to handle this.*\n\nOpen `webpack.config.js` in the root project directory and locate the following line:\n```javascript\nhistoryApiFallback: true,\n```\n\nChange it to this:\n```javascript\nhistoryApiFallback: {\n  disableDotRule: true\n},\n```\n*Note: We'll need to run `npm start` again for this to take effect.*\n\nNow we jump back to `src/components/Profile.jsx` and add a single method that will let us determine if we're viewing the local user's profile or another user's profile.\n\n```javascript\nisLocal() {\n  return this.props.match.params.username ? false : true\n}\n```\n\nThen we can modify our `fetchData()` method like so:\n\n```javascript\nfetchData() {\n  this.setState({ isLoading: true })\n  if (this.isLocal()) {\n    const options = { decrypt: false }\n    getFile('statuses.json', options)\n      .then((file) => {\n        var statuses = JSON.parse(file || '[]')\n        this.setState({\n          person: new Person(loadUserData().profile),\n          username: loadUserData().username,\n          statusIndex: statuses.length,\n          statuses: statuses,\n        })\n      })\n      .finally(() => {\n        this.setState({ isLoading: false })\n      })\n  } else {\n    const username = this.props.match.params.username\n\n    lookupProfile(username)\n      .then((profile) => {\n        this.setState({\n          person: new Person(profile),\n          username: username\n        })\n      })\n      .catch((error) => {\n        console.log('could not resolve profile')\n      })\n  }\n}\n```\nWe first use `isLocal()` to check if we're viewing the local user profile or another user's profile. If it's the local user profile, we will run the `getFile()` function we added earlier. Otherwise, we lookup the profile belonging to the username using the `lookupProfile()` method.\n\n*Note: For `https` deployments, the default Blockstack Core API endpoint for name lookups should be changed to point to a core API served over `https`. Otherwise name lookups will fail due to browsers blocking mixed content. Refer to the [Blockstack.js documention](http://blockstack.github.io/blockstack.js/#getfile) for details. *\n\nIn order to fetch the user's statuses, we add the following block to `fetchData()` right after the call to `lookupProfile(username)... catch((error)=>{..}` block:\n\n\n```javascript\nconst options = { username: username, decrypt: false }\ngetFile('statuses.json', options)\n  .then((file) => {\n    var statuses = JSON.parse(file || '[]')\n    this.setState({\n      statusIndex: statuses.length,\n      statuses: statuses\n    })\n  })\n  .catch((error) => {\n    console.log('could not fetch statuses')\n  })\n  .finally(() => {\n    this.setState({ isLoading: false })\n  })\n```\n\nAnd lastly, we need to conditionally render the logout button, status input textbox and submit button so they don't show up when viewing another user's profile. In the `render()` method, check to ensure that you are viewing your own profile, by wrapping the Logout button and inputs with the `{isLocal() && ...}` condition:\n\n```javascript\n{this.isLocal() &&\n  <span>\n    &nbsp;|&nbsp;\n    <a onClick={ handleSignOut.bind(this) }>(Logout)</a>\n  </span>\n}\n\n//...\n\n{this.isLocal() &&\n  <div className=\"new-status\">\n    <div className=\"col-md-12\">\n      <textarea className=\"input-status\"\n        value={this.state.newStatus}\n        onChange={this.handleNewStatusChange}\n        placeholder=\"What's on your mind?\"\n      />\n    </div>\n    <div className=\"col-md-12 text-right\">\n      <button\n        className=\"btn btn-primary btn-lg\"\n        onClick={this.handleNewStatusSubmit}\n      >\n        Submit\n      </button>\n    </div>\n  </div>\n}\n```\n\nAnd we're done! Point your browser to `http://localhost:8080/your_blockstack.id` to see the profile. Note: You will need to have a registered Blockstack ID to for this to work.\n\nTo see the complete source code of this tutorial visit: https://github.com/larrysalibra/publik\n\nSee a working version of the app [here](http://publik.ykliao.com).\n","title":"Multi-player Storage Tutorial","description":"Build a decentralized micro-blogging app using multi-player storage in Gaia.","image":"/images/tutorials/multi-player-storage.png","youtube":"https://www.youtube.com/embed/w7Sa54H-CGg"},"todo-list":{"markdown":"\n\nWhat are we learning today?\n\n- How to build a Single Page Javascript application with Blockstack\n- How to manage authentication using a Blockstack ID\n- How to use Blockstack Storage (Gaia) as an application backend.\n\n#### Requirements\n\n- Installed and running [Blockstack Browser](https://github.com/blockstack/blockstack-browser/releases)\n- node.js LTS Version -> `v6.11.2`\n\n#### Getting Started - Install Dependancies & run server\n\n```\n$ git clone git@github.com:blockstack/blockstack-todos.git\n$ cd blockstack-todos\n$ yarn install\n$ npm run start\n```\n\n#### Sign In - How it works\n\nAs you click the `Sign In With Blockstack` button an ephemeral key is generated within the application. This key, which is just used for the particular instance of the application, is just used to sign a Sign In request. It also generates a public key which is sent to the browser and used to encrypt data coming back to your Blockstack node. This allows the application to store data in your Blockstack storage. The signed authentication request is sent to Blockstack through a JSON Web Token. The JWT is passed in via a query string in the parameter: `?authRequest=j902120cn829n1jnvoa...`.\n\nTo decode the token and see what information it holds you can navigate to [jwt.io](http://jwt.io/) and paste the full token there. The output should look similar to below:\n\n```json\n{\n  \"jti\":\"bbf82977-cc3e-4593-bacc-33ff3b749790\",\n  \"iat\":1501784293,\n  \"exp\":1501787893,\n  \"iss\":\"did:btc-addr:1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\",\n  \"public_keys\":[\n    \"a09932dx081273xmreDII8yhjd0m8ioawfokljISHhejrnHG\"\n  ],\n  \"domain_name\":\"http://localhost:8080/\",\n  \"manifest_uri\":\"http://localhost:8080/manifest.json\",\n  \"redirect_uri\":\"http://localhost:8080/\",\n  \"scopes\":[\n    \"store-write\"\n  ]\n}\n```\n\nClicking the Sign In button brings up a modal. When you click `Approve` the following actions are taken:\n\n- A request is sent from the browser to your local blockstack-core node.\n- The blockstack-core node generates a session token which is returned to the application.\n- This session token allows the application to read and write files to your personal Blockstack storage.\n- An authentication response is then generated which is similar to the `authRequest` above.\n- The `authResponse` also includes a private key intended only for the application. This allows the application to encrypt data on your storage.\n- You are now logged into the Todo application!\n\n##### Notes\n\n- `iss` is a decentralized identifier or `did`. This is used to identify you, along with your name to the application. As you see here the particular `did` we are using is a `btc-addr`.\n- The JWT implementation we use is different from other implementations because of the underlying cryptography we employ. There are libraries in [Javascript](https://github.com/blockstack/jsontokens-js) and [Ruby](https://github.com/blockstack/ruby-jwt-blockstack) available on the Blockstack Github to allow you to work with these tokens.\n\n#### Storage - How it works\n\nTo see the Gaia Storage in action add a couple of todos. Maybe a list of applications you want to see built on top of Blockstack. I added the following:\n\n- [ ] Software package manager secured by the blockchain\n- [ ] Mutable torrents with human readable names\n- [ ] Decentralized twitter\n\nThese Todos have now been stored in the Gaia Hub linked to your Blockstack ID. For more information about the Gaia hub, see the [hub documentation](https://github.com/blockstack/gaia).\n\nYou can fetch the `todos.json` file you just added by opening the Javascript console and running the following command:\n\n```Javascript\nblockstack.getFile(\"todos.json\", { decrypt: true }).then((file) => {console.log(file)})\n```\n\nYou should see the todos that were recently added. The todos created above generate the following JSON:\n\n```json\n[\n  {\n    \"id\":2,\n    \"text\":\"Software package manager secured by the blockchain\",\n    \"completed\":false\n  },\n  {\n    \"id\":1,\n    \"text\":\"Mutable torrents with human readable names\",\n    \"completed\":false\n  },\n  {\n    \"id\":0,\n    \"text\":\"Decentralized twitter\",\n    \"completed\":false\n  }\n]\n```\nNow add another todo and mark it completed:\n\n- [x] Blockstack Todo\n- [ ] Software package manager secured by the blockchain\n- [ ] Mutable torrents with human readable names\n- [ ] Decentralized twitter\n\nWhen you fetch the newly generated file using the Javascript console it will reflect the change:\n\n```json\n[\n  {\n    \"id\":3,\n    \"text\":\"Blockstack Todo\",\n    \"completed\":true\n  },\n  {\n    \"id\":2,\n    \"text\":\"Software package manager secured by the blockchain\",\n    \"completed\":false\n  },\n  {\n    \"id\":1,\n    \"text\":\"Mutable torrents with human readable names\",\n    \"completed\":false\n  },\n  {\n    \"id\":0,\n    \"text\":\"Decentralized twitter\",\n    \"completed\":false\n  }\n]\n```\n\nNow that you have seen the application in action, lets dig into how it works. Open the `blockstack-todos` repository in a text editor.\n\n#### Sign In - Implementation\n\nBecause this is a [Vue.js](https://vuejs.org/) application the Sign In code is in two locations. The first is a call in `src/components/Landing.vue`:\n\n```js\nsignIn () {\n  const blockstack = this.blockstack\n  blockstack.redirectToSignIn()\n}\n```\nWhen this button is clicked the authentication request described above is generated and the user is redirected to their `blockstack-browser` to approve the login. Once the user approves the login the application must handle the `authResponse`. This happens in `src/App.vue` which is the page at the application root, `/`:\n\n```js\nif (blockstack.isUserSignedIn()) {\n  this.user = blockstack.loadUserData().profile\n} else if (blockstack.isSignInPending()) {\n  blockstack.handlePendingSignIn()\n  .then((userData) => {\n    window.location = window.location.origin\n  })\n}\n```\n\nFirst we check if the user is signed in with `blockstack.isUserSignedIn()`. If this is true then we can pull that data from the browser and use it in our application.\n\nIf we aren't signed in we then need to check `blockstack.isSignInPending()`. This means that an `authResponse` has been sent back to the application but hasn't been processed yet. the `handlePendingSignIn` function takes care of processing that pending Sign In.\n\nSignout is handled in `src/components/Dashboard.js`. The method allows the application creator to decide where to redirect the user upon Sign Out:\n\n```js\nsignOut () {\n  this.blockstack.signUserOut(window.location.href)\n}\n```\n\n#### Storage - Implementation\n\nNext we are going to see how the application interacts with your Gaia Hub. This code lives in the `src/components/Dashboard.vue` file. First lets see where the changes to the Todos are processed:\n\n```js\ntodos: {\n  handler: function (todos) {\n    const blockstack = this.blockstack\n    return blockstack.putFile(STORAGE_FILE, JSON.stringify(todos), { encrypt: true })\n  },\n  deep: true\n}\n```\n\nYou can see that the `todos` JSON object is passed in. Then we use the `blockstack.putFile()` method to store it in our Gaia Hub. Quick and easy!\n\nThe other operation we need to perform is to read the Todos from the storage. This is accomplished with the `blockstack.getFile()` method which returns a promise:\n\n```js\nfetchData () {\n  const blockstack = this.blockstack\n  blockstack.getFile(STORAGE_FILE, { decrypt: true })\n  .then((todosText) => {\n    var todos = JSON.parse(todosText || '[]')\n    todos.forEach(function (todo, index) {\n      todo.id = index\n    })\n    this.uidCount = todos.length\n    this.todos = todos\n  })\n},\n```\n\nThe `todos` data is retrieved from the promise.\n\nYou now have everything you need to construct complex applications complete with Authentication and Storage on the Decentralized Internet. Go forth and build!\n","title":"Blockstack Todos","description":"Walk through creating a basic Todo application with Blockstack. Learn about Sign In flow and Gaia storage.","image":"/images/article-photos/chalkboard.jpg","youtube":"https://www.youtube.com/embed/oyvg-h0obFw"},"auth":{"markdown":"\n\n### Javascript Libraries\n\n- [Blockstack.js](https://github.com/blockstack/blockstack.js)\n\n### Javascript Examples\n\n- [Hello, Blockstack](https://github.com/blockstack/blockstack.js/blob/master/tests/browserTests/auth/app.js#L18)\n\n### Ruby Libraries\n\n- [Blockstack Ruby](https://github.com/blockstack/blockstack-ruby)\n\n### Ruby Examples\n\n- [Blockstack Forum](https://forum.blockstack.org)\n","title":"Blockstack Auth","description":"Blockstack Auth libraries.","image":"/images/article-photos/chalkboard.jpg"},"blockchain-identity":{"markdown":"\n\nA blockchain identity (or blockchain ID) is a generic term used to refer to any identity on the blockchain. Users can have one blockchain identity or many and can register them just like one would register domain names or accounts on Facebook or Twitter.\n\nThe main difference between blockchain identities and accounts on any other service is that blockchain-based systems have strong ownership. Blockchain identities can't be confiscated by any service because the system defines ownership according to ownership of public-private keypairs, just like ownership of coins on Bitcoin. This is in direct contrast to Twitter or Facebook usernames, which could be confiscated or censored at any time by the respective companies that they belong to.\n\n#### Identity on Blockstack\n\nBlockstack is one of the largest, most popular blockchain identity systems, with 80,000 registered identities.\n\nOn Blockstack, identities are referred to as \"blockstack identities\" and they come with profiles and globally unique names.\n\nProfiles can contain both private and public information, which is attested to by the user and can be verified by peers and select authorities.\n\nIdentities can be registered for people, companies, websites, software packages, and more.\n","title":"Blockchain Identity","description":"Learn about what blockchain identities are and what they can be used for.","image":"/images/article-photos/passport.jpg","next":"blockstack-profiles","date":"March 22, 2016"},"blockstack-core-v0-14":{"markdown":"\n\nThis is the largest release of Blockstack Core since the initial release in September 2015 and is a major update. Version 0.14 is a hard fork that will activate at Bitcoin block 436363. This release removes our dependence on a distributed hash table (DHT) network, improves performance, reduces memory footprint, and adds support for multisig and a RESTful API.\n\n<img src=\"/images/article-photos/blockstack-core-v0-14/warning.png\" width=\"100%\" alt=\"Version 0.14 is a hard fork that will activate at Bitcoin block 436363\" />\n\nBelow are some notable features that are included in this release:\n\n- **Better Data Reliability.** When we launched Blockstack, we included a default DHT-based network for storing additional data. The pointers for data were in the blockchain and the off-chain routing data (zone files) were stored in the DHT. DHTs are traditionally unreliable and hard to scale and we faced these challenges in our production deployment. The biggest change in v0.14 is that it replaces the Blockstack DHT with a new unstructured BitTorrent-like network called the Atlas network which is much more reliable than the previous DHT network.\n- **20x RAM reduction.** The earlier version of Blockstack Core used a flat JSON file for storing data, which worked at small scale but had performance issues at larger scale. More specifically, the memory footprint of using a flat JSON file became too much. Blockstack Core v0.14 stores its state in a sqlite3 database, which yields an overall 20x reduction in RAM usage (down to 150MB from 3GB), and reduces the complexity of adding support for new types of data queries.\n- **6x Faster Synchronization.** One of the main bottlenecks for boot up time for new nodes is the speed at which it can synchronize with the underlying blockchain. The v0.14 release of Virtualchain now fetches most of its data from Bitcoin’s peer-to-peer network, instead of via RPC. This yields a 6x performance improvement and removes the need for the multiprocess work pool used in v0.13. We had to write custom software to fetch data directly from the Bitcoin backplane, instead of the widely used RPC interface, and we hope that other projects in the ecosystem can also use our open-source code for faster block-fetching.\n- **Multisig Support.** Security of name ownership is very important to us. The v0.14 release now supports multisig — that is, a quorum of key-pairs can pay for and manage names. This is more secure than using a single key, since now the user can divide up the set of keys across multiple devices and multiple trusted parties. Version 0.14 of the client release defaults to a 2-of-3 quorum, using pay-to-script-hash Bitcoin addresses.\n- **RESTful API.** In order to make it simpler to use Blockstack Core, we’ve included a RESTful interface with built-in documentation in the v0.14 release, in addition to the already existing RPC interface. We’ve also merged independent servers/components like the resolver, search, and a few others into a single, easily accessible API with the v0.14 release.\n- **Testnet Support.** We want to make it easier for developers to rapidly test their applications without worrying about spending tokens on the live network. The v0.14 release supports Bitcoin’s testnet network, which we leverage in version v0.14 in our integration test framework.\n\n<img src=\"/images/article-photos/blockstack-core-v0-14/diagram.png\" width=\"100%\" alt=\"Blockstack protocol diagram\" />\n\n### Better Data Reliability\n\nOne of the biggest milestones of this release is the addition of the Atlas network. It solves a [long-standing issue](https://github.com/blockstack/blockstack-core/issues/219) of ensuring zone file data reliability. We want to ensure that zone files stay online and don’t get lost, even if Blockstack nodes come and go. This is vital for resolving Blockstack profiles, since zone files link the on-chain pointers to off-chain state in external storage.\n\n#### The Problem with DHTs\n\nBefore v0.14, we had used a patched [Kademlia DHT implementation](https://github.com/bmuller/kademlia) for hosting zone files. Our patches ensured that (1) each key was the hash of its value, and (2) each key corresponded to an accepted name-update Blockstack transaction on Bitcoin. This prevented most classical DHT attacks — no one could overwrite a user’s key/value pairs, and no one could flood the DHT with lots of junk data.\n\nHowever, **DHTs are still vulnerable to routing attacks**. Instead of trying to mess with the key/value pairs, an attacker can add and remove nodes in order to take control of individual hash buckets. These nodes can simply deny requests for data, censoring keys. If they take over all nodes with a copy of a key/value pair, they can simply discard it, leading to permanent zone file loss. **This is a fundamental challenge to using structured overlay networks for decentralized storage** (DHTs being one example). Since nodes do not store a full replica of the state, they have to route data requests to each other. Since anyone can add nodes to these networks, attackers can take control of routes to deny service and destroy data.\n\n#### Atlas Network\n\nWe overcome the challenges with DHTs with a new network called the Atlas network. With the Atlas network we make use of the property that (1) zone files are small (<4KB each), and (2) the total number grows at a fixed rate. It doesn’t take a lot of disk space to have each node host a full copy of all zone files (only ~300MB today). The Atlas network solves a special case of the general problem of reliable decentralized storage — the case where (1) the data set is small in size and (2) there is a full index of data available to the network.\n\nAtlas nodes maintain a 100% state replica, and they organize into an unstructured overlay network to stay resilient against targeted node attacks. An Atlas node works a lot like a BitTorrent node. Each node gets the set of zone file hashes from the blockchain, and they constantly try to get zone files they don’t have.\n\nThe Atlas network implements a K-regular random graph. Each node selects K other nodes at random to be its neighbors via [MHRWDA](http://www4.ncsu.edu/~dyeun/pub/sigmetrics%2712-full-double-column.pdf), and regularly asks them for the set of zone files they have. Peers pull missing zone files in rarest-first order to maximize availability (like BitTorrent), and store them both to locally and at remote backup locations (e.g., a user chosen storage service like Dropbox or S3). When it receives a missing zone file from a client, the node pushes it to its immediate neighbors that don’t have it yet.\n\nThe Atlas network is much more reliable than the previous DHT network. Like the DHT, Atlas nodes already know the hashes of the zone files, so no one can upload invalid data. But unlike the DHT, data is replicated on O(N) nodes instead of only on a small subset of nodes.\n\nThis strategy makes unavailability attacks expensive. To censor a target zone file for a single node, an attacker must persistently eclipse all of that node’s neighbors. Censoring the entire network requires attacking O(N) nodes. By contrast, only O(log N) DHT nodes need to be taken over to censor a zone file for everyone. Even then, the victim node will detect the censorship unless the attacker also eclipses the victim’s Bitcoin node (which requires building a fraudulent blockchain fork with sufficient PoW).\n\nWe believe that the Atlas network is a major step forward towards having a reliable, hard-to-censor, and decentralized data store for zone files and we’re excited to announce that v0.14 will start using the Atlas network in production. We plan to release detailed documentation and design on the Atlas network soon.\n\n### Consensus Notes\n\nVersion 0.14 is a consensus-breaking release — once deployed, it will not be compatible with earlier releases. This is because earlier releases do not accept transactions sent from multisig outputs. As such, v0.14 is a **hard fork** from v0.13. Every node operator is encouraged to upgrade to v0.14 as soon as we release it, since v0.13 and v0.14 will [diverge into two separate fork sets](https://blog.blockstack.org/blockchains-for-distributed-systems-ffd68e6341b5#.ei40w6m6h).\n\nVersion 0.14 implements phase 1 of a 2-phase improvement in how we manage names and identities. The end goal is that a user’s on-chain *identity* information (i.e. its zone file and public key hashes) will have a unique serial number in the .id namespace and will never expire. Names in the .id namespace will point to these identities, and must be periodically renewed. Version 0.15 will implement phase 2 of our improvement plan, and will be implemented as another hard-fork one year from now. The discussion thread and a description of the plan can be found [here](https://github.com/blockstack/blockstack-core/issues/244#issuecomment-251226177).\n\nWe will switch our infrastructure over from v0.13 to v0.14 at **block 436363 in the Bitcoin blockchain**. After this block height, v0.13 and v0.14 are expected to diverge, since this is the height at which the consensus-breaking changes in v0.14 will activate.\n\n**Node operators have about 3 weeks to upgrade. If you need help doing so, please drop us a line on our Slack channel at [chat.blockstack.org](http://chat.blockstack.org).**\n\n### Getting Blockstack Core\n\nPlease check out the [repository](https://github.com/blockstack/blockstack-core) on GitHub, and star it if you like it!\n\nPlease note that v0.14 will be unusable until block 436363. This is when the new features activate. However, if you want to test them in an offline deployment, see the documentation [here](https://github.com/blockstack/blockstack-integration-tests/blob/rc-0.14.0/README.md).\n\n### Contributors\n\nWe would like to thank the following people for helping us get the 0.14 release ready. Thank you everyone for sending pull requests, helping us test the software, submitting bug reports, and being patient with us while we fix them!\n\n- @aagorelik\n- Aran Dunkley\n- Burt Bielicki\n- Carver Harrison\n- Charles Lehner\n- @cryptid11\n- Daniel Buchner\n- Derek Martin\n- Donncha O’ Cearbhaill\n- @fpischedda\n- George Ty\n- @Gitju\n- Guy Lepage\n- @JFiscella\n- John Light\n- Jude Nelson\n- Justin Drake\n- @JZA\n- @koinster\n- Muneeb Ali\n- Larry Salibra\n- Odin Hørthe Omdal\n- Pandu Rao\n- @ruxton\n- Ryan Shea\n- Sam Wood\n- Samantha Atkins\n- Santiago Siri\n- Sebastian Pir\n- Stanislas Marion\n- Stephen Edgar\n- Stian Ellingsen\n- @syck\n- Whit Jackson\n- @wutengcoding\n- Xiaowei Liu\n\n![Blockstack social icons](/images/article-photos/blockstack-core-v0-14/social.png)\n\n- Website . [blockstack.org](http://blockstack.org)\n- Slack . [chat.blockstack.org](http://chat.blockstack.org)\n- Reddit . [r/blockstack](http://reddit.com/r/blockstack)\n- Twitter . [@blockstackorg](http://twitter.com/blockstackorg)\n- Medium . [blog.blockstack.org](http://blog.blockstack.org)\n- GitHub . [@blockstack](http://github.com/blockstack)\n- YouTube . [https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ](https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ)","title":"Blockstack Core v0.14.0 Release","description":"We are pleased to announce the upcoming release of version 0.14.0 of Blockstack Core","image":"/images/article-photos/blockstack-core-v0-14/header.png","next":"blockstack-core-v0-14-0-release","date":"October 6, 2016"},"blockstack-profiles":{"markdown":"\n\nBlockstack is the largest, most popular blockchain identity system, with 65,000 registered identities.\n\nOn Blockstack, identities are referred to as \"blockstack identities\" and they come with profiles and globally unique names.\n\nProfiles can contain both private and public information, which is attested to by the user and can be verified by peers and select authorities.\n\nIdentities can be registered for people, companies, websites, software packages, and more.\n\nWhen you set up a blockstack identity, you can associate as much or as little information with it as you want. This is referred to as your profile. More information means people can find you more easily and trust that you are who you say you are. Less information means being able to retain more privacy.\n\nFurther, every identity on blockstack contains a series of attributes, each of which can be either public or private and either user-attested or authority-attested.\n\n#### Public Profiles\n\nPublic profiles are constructed through the compilation of public statements, signed by the user that owns the profile.\n\nHere's an example of a blockstack profile:\n\n![Naval's Profile](/images/article-diagrams/naval-card.png)\n\nHere, Naval chose to publicly display his name, bio, and accounts across various social networks.\n\n#### Extended Profiles\n\nExtended profiles are public profiles, extended with other information that has not been made publicly accessible.\n\nThis information is privately released by the user to selected parties.\n\nWhen a user authorizes another party to access information, the user encrypts the information with the party's key and hosts it in a publicly-accessible location.\n\nThe authorized party is sent the link to the information and is able to decrypt it and extend the public profile with the private information.\n\nThe user is free to update the private information, such as an address, and the authorized party will be able to continually grab the updated information and keep everything in sync.\n\nHere's an example of some address information that might be seen in an extended profile, but not publicly accessible:\n\n```json\n{\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"16 Maiden Ln\",\n    \"addressLocality\": \"San Francisco, CA\",\n    \"postalCode\": \"94108\",\n    \"addressCountry\": \"United States\"\n  }\n}\n```\n\n#### Profile Data\n\nProfiles are encoded in a format known as JSON, with a specific JSON schema that is derived from schema.org.\n\nLet's return to the example above of Naval's profile, and see what it might look like when it's shown as raw data:\n\n```json\n{\n  \"@context\": \"http://schema.org/\",\n  \"@type\": \"Person\",\n  \"givenName\": \"Naval\",\n  \"familyName\": \"Ravikant\",\n  \"description\": \"Co-founder of AngelList\",\n  \"image\": [\n    {\n      \"@type\": \"ImageObject\",\n      \"name\": \"avatar\",\n      \"contentUrl\": \"https://s3.amazonaws.com/dx3/naval\"\n    }\n  ],\n  \"website\": [\n    {\n      \"@type\": \"WebSite\",\n      \"url\": \"angel.co\"\n    }\n  ],\n  \"account\": [\n    {\n      \"@type\": \"Account\",\n      \"service\": \"facebook\",\n      \"identifier\": \"navalr\",\n      \"proofType\": \"http\",\n      \"proofUrl\": \"https://facebook.com/navalr/posts/10152190734077261\"\n    },\n    {\n      \"@type\": \"Account\",\n      \"service\": \"twitter\",\n      \"identifier\": \"naval\",\n      \"proofType\": \"http\",\n      \"proofUrl\": \"https://twitter.com/naval/status/486609266212499456\"\n    }\n  ],\n  \"worksFor\": [\n    {\n      \"@type\": \"Organization\",\n      \"@id\": \"angellist.corp\"\n    }\n  ],\n  \"knows\": [\n    {\n      \"@type\": \"Person\",\n      \"@id\": \"jack.id\"\n    },\n    {\n      \"@type\": \"Person\",\n      \"@id\": \"travisk.id\"\n    }\n  ]\n}\n```\n\nHere we can see Naval's name, picture, and bio. We can also see proofs of a website he owns (angel.co), an organization he controls (angellist.corp), and his accounts on Twitter and Facebook. Last, we can see that he knows two users with the usernames \"jack.id\" and \"travisk.id\".\n\nContinue to the next article to learn about verified profiles and identity attestations.","title":"Blockstack Profiles","description":"Explore about identity attestations on Blockstack.","image":"/images/article-photos/persona.jpg","next":"identity-attestation","date":"March 22, 2016"},"blockstack-vs-dns":{"markdown":"\n\nAs with the traditional domain name system, the Blockstack domain name system allows users to lookup, register, renew, and transfer names, as well as manage name resolution information.\n\nBut Blockstack DNS differs in a few fundamental ways from traditional DNS.\n\n#### Decentralization\n\nWhile the traditional domain name system is run by an international organization called ICANN, the Blockstack name registry is maintained in a completely decentralized way. It is run by everyone and it is controlled by no one, giving Blockstack DNS incredible and unprecedented technical and socio-political resilience. This is because each Blockstack DNS node independently calculates the current, global state of all names in the network, without needing to trust a 3rd party principal.\n\n#### Protection Against Cache Poisoning\n\nTraditional DNS relies on a fragile system of DNS caches for disseminating name resolution information. Meanwhile, Blockstack DNS's explicit cache invalidation system serves as a powerful mechanism for securely transmitting name resolution information that is both timely and 100% accurate. This helps make Blockstack DNS invulnerable to cache poisoning, without also requiring you to trust a central third party like a DNSSEC root server.\n\n#### Cryptographic Keypair Bindings\n\nBlockstack DNS and traditional DNS differ in how they associate names with certificates. Traditional DNS relies on a hierarchy of anointed organizations to attest to the ownership of domains. Here, each organization represents a systemic threat to name resolution security. Misbehavior of a single organization has wide-reaching, devastating consequences, because it effectively decides who controls which name. By contrast, every name in Blockstack DNS is automatically associated with a cryptographic keypair such that only the private key owner can control the name. Moreover, any end-user can audit and verify the authenticity of each name's record and ownership history.\n","title":"Blockstack DNS vs. Traditional DNS","description":"Learn about how Blockstack DNS differs from traditional ICANN DNS.","image":"/images/article-photos/football.jpg","next":"blockstack-vs-namecoin","date":"February 25, 2016"},"blockstack-vs-namecoin":{"markdown":"\n\nBlockstack DNS differs from Namecoin DNS in a few fundamental ways: blockchain layering, storage models, name pricing models, and incentives for miners.\n\n#### Blockchain Layering\n\nBlockstack and Namecoin differ in how the domain name system is operated. Namecoin DNS is operated by nodes of a cryptocurrency called Namecoin, which is a fork of Bitcoin that requires its own separate blockchain. Blockstack DNS, meanwhile, has a portable architecture. It is designed to be able to read and write data to *any* blockchain and the logic for operating the domain name system is decoupled from the logic of the underlying blockchain. This allows one to run Blockstack DNS on the most secure blockchain. While this is currently the Bitcoin blockchain, Blockstore DNS and all of the network's state can be seamlessly ported to another blockchain if it ever makes sense to do so.\n\n#### Storage Models\n\nWith Namecoin DNS, routing information is stored directly in the blockchain, which can lead to quite a bit of blockchain bloat. Blockstack DNS, meanwhile, stores only hashes of routing information records in the blockchain, deciding to store the rest in decentralized content-addressable storage units (by default, Blockstack is configured to store data in a DHT). These routing records then can link to other data stored elsewhere, whether that be in a DHT or on a hosted data storage provider like S3. This makes for a much more scalable and cost-efficient design.\n\n#### Name Pricing Models\n\nWith Namecoin DNS, all names are set at the same low price and there are no options for users to create new namespaces and set their own name pricing schemes. This results in rampant squatting, which significantly degrades the user experience for anyone trying to register names. Blockstack DNS, meanwhile, has a wide range of options for users to create their own namespaces and set their own name pricing schemes. Namespaces can be created with really cheap names (great for a username namespace) or they can be created with really expensive names (great for a domain namespace resilient to squatting).\n\nName prices can be set to go down with an increase in the number of characters or with the presence of numbers and special characters. Furthermore, names can be set to expire in an arbitrary amount of time (e.g. a year), or they can be set to never expire at all. All these options allow users to design namespaces that encourage registration of names that users want and are willing to pay for, while dis-incentivizing the mass registration of names by squatters. All this leads to a superior user experience for everyone involved.\n\nAs an example, a name can be registered for a relatively low registration fee like $0.20 (in addition to a transaction fee of a few cents). Meanwhile, a shorter, desirable name may cost $10 or more.\n\n#### Incentives for Miners\n\nIn the Namecoin system, money spent on name registrations is destroyed as a sacrifice. Blockstack works in a similar way today, but going forward registration fees for names will start going to miners. This creates a significant economic incentive for miners to contribute additional resources to the underlying blockchain, and it aligns everyone's interests around supporting a decentralized DNS system.\n","title":"Blockstack DNS vs. Namecoin","description":"Learn about how Blockstack DNS differs from Namecoin.","image":"/images/article-photos/sprinting.jpg","next":"namespaces","date":"February 25, 2016"},"browser-installation":{"markdown":"\n\n### Developer Installation\n\nDevelopers can install the experimental alpha of the Blockstack Browser and run it locally. Here's how:\n\n1. Clone the repo at https://github.com/blockstack/blockstack-browser.git\n1. Make sure you have gulp installed globally by running `npm install gulp -g`\n1. Run `npm install` from the root directory\n1. Run `gulp proxy` to start the CORS proxy on port 1337\n1. In another terminal, run `gulp dev`\n\nYour browser will automatically be opened you'll see the Blockstack dashboard via the browser-sync proxy address. Files are being served from the `/build` directory and any changes to files in the `/app` directory will trigger Gulp to rebundle the assets and reload the browser.\n\n### Production Deployment\n\nThe Blockstack Browser can be packaged up and deployed for production distribution. Instructions for this are coming soon.","title":"Browser - Installation","description":"Get started by installing the Blockstack Browser.","image":"/images/article-photos/computer.jpg"},"cli-basic-usage":{"markdown":"\n\n### Lookups\n\nNow, to perform a name lookup, run this command:\n\n```bash\n$ blockstack lookup timblee.id\n```\n\nYou should get a response like this:\n\n```\n{\n    \"profile\": {\n        \"@type\": \"Person\", \n        \"account\": [\n            {\n                \"@type\": \"Account\", \n                \"identifier\": \"timbl\", \n                \"proofType\": \"http\", \n                \"proofUrl\": \"https://gist.github.com/timbl/04e8ac7c81cd2dee2f51a5e8c672188d\", \n                \"service\": \"github\"\n            }, \n            {\n                \"@type\": \"Account\", \n                \"identifier\": \"timberners_lee\", \n                \"proofType\": \"http\", \n                \"proofUrl\": \"https://twitter.com/timberners_lee/status/740677355950080001\", \n                \"service\": \"twitter\"\n            }\n        ], \n        \"image\": [\n            {\n                \"@type\": \"ImageObject\", \n                \"contentUrl\": \"https://s3.amazonaws.com/97p/lUU.jpeg\", \n                \"name\": \"cover\"\n            }\n        ]\n    }, \n    \"zonefile\": \"$ORIGIN timblee.id\\n$TTL 3600\\n_http._tcp URI 10 1 \\\"https://blockstack.s3.amazonaws.com/timblee.id\\\"\\n\"\n}\n```\n\n### Price Estimations\n\nEvery name costs a certain amount of money to register, and each namespace has it's own name pricing rules.\n\nAs an example, in the `.id` namespace 6-letter alphabetic-only names cost 0.001 bitcoins, but with every additional letter the names get 4x cheaper and with every fewer letter the names get 4x more expensive. In addition, names without vowels and names with numbers and special characters get a special discount.\n\nTo determine how much a name will cost to order a name (including all transaction fees), use the `price` command:\n\n```bash\n$ blockstack price <YOUR NAME>.id\n```\n\nExample response:\n\n```json\n{\n    \"name_price\": {\n        \"btc\": \"0.00025\", \n        \"satoshis\": \"25000\"\n    }, \n    \"preorder_tx_fee\": {\n        \"btc\": \"0.00047406\", \n        \"satoshis\": \"47406\"\n    }, \n    \"register_tx_fee\": {\n        \"btc\": \"0.00046184\", \n        \"satoshis\": \"46184\"\n    }, \n    \"total_estimated_cost\": {\n        \"btc\": \"0.00188394\", \n        \"satoshis\": \"188394\"\n    }, \n    \"update_tx_fee\": {\n        \"btc\": \"0.00069804\", \n        \"satoshis\": \"69804\"\n    }\n}\n```\n\n### Deposits\n\nName registrations and name management operations cost money, so before you can do these things, you'll need to deposit bitcoins in your account.\n\n*Note that in some cases you'll need to wait for one or more confirmations (about 10-60 minutes) before the Blockstack CLI will register the funds as fully deposited and allow you to proceed with registering names.*\n\nTo get the Bitcoin address where you should deposit your bitcoins, run the `deposit` command:\n\n```bash\n$ blockstack deposit\n```\n\nExample response:\n\n```json\n{\n    \"address\": \"13aUoeUtQnHUTfRwbksKvyvMRMzN3Qf2iR\",\n    \"message\": \"Send bitcoins to the address specified.\"\n}\n```\n\n### Registrations\n\nAfter you get comfortable with looking up names, take the next step and register and manage a name for yourself. Run the following command:\n\n```bash\n$ blockstack register <YOUR NAME>.id\n```\n\nIf the name hasn't been registered yet, you'll get a confirmation that your registration is pending:\n\n```json\n{\n    \"success\": true,\n    \"transaction_hash\": \"f576313b2ff4cc7cb0d25545e1e38e2d0d48a6ef486b7118e5ca0f8e8b98ae45\",\n    \"message\": \"The name has been queued up for registration and will take a few hours to go through. You can check on the status at any time by running 'blockstack info'.\"\n}\n```\n\nAfter a few hours, your registration should go through and you'll be able to update your DNS records for the name.\n\n### Updates\n\nTo update the data record associated with a name you own, run the `blockstack update` command:\n\n```bash\n$ cat > new_zone_file.txt <<EOF\n\\$ORIGIN swiftonsecurity.id\n\\$TTL 3600\npubkey TXT \"pubkey:data:04cabba0b5b9a871dbaa11c044066e281c5feb57243c7d2a452f06a0d708613a46ced59f9f806e601b3353931d1e4a98d7040127f31016311050bedc0d4f1f62ff\"\n_file IN URI 10 1 \"file:///Users/TaylorSwift/.blockstack/storage-disk/mutable/swiftonsecurity.id\"\n_https._tcp IN URI 10 1 \"https://blockstack.s3.amazonaws.com/swiftonsecurity.id\"\n_http._tcp IN URI 10 1 \"http://node.blockstack.org:6264/RPC2#swiftonsecurity.id\"\n_dht._udp IN URI 10 1 \"dht+udp://fc4d9c1481a6349fe99f0e3dd7261d67b23dadc5\"\nEOF\n\n$ blockstack update swiftonsecurity.id new_zone_file.txt\n```\n\nExpected response:\n\n```json\n{\n    \"success\": true,\n    \"transaction_hash\": \"4e1f292c09ad8e03a5f228b589d9a7dc3699b495862bee3b40f2432ac497b134\",\n    \"message\": \"The name has been queued up for update and will take ~1 hour to process. You can check on the status at any time by running 'blockstack info'.\"\n}\n```\n","title":"Command Line - Basic Usage","description":"Explore Blockstack usage, including looking up & registering names.","image":"/images/article-photos/programming.jpg","next":"cli-extended-usage"},"cli-extended-usage":{"markdown":"\n\n### Transfers\n\nTo transfer a name you own to another address, run the `blockstack transfer` command:\n\n```bash\n$ blockstack transfer <NAME YOU OWN> <RECIPIENT ADDRESS>\n```\n\nExpected response:\n\n```json\n{\n    \"success\": true,\n    \"transaction_hash\": \"8a68d52d70cf06d819eb72a9a58f4dceda942db792ceb35dd333f43f55fa8713\",\n    \"message\": \"The name has been queued up for transfer and will take ~1 hour to process. You can check on the status at any time by running 'blockstack info'.\"\n}\n```\n\n### Names You Own\n\nTo get a list of the names you own, run the `blockstack names` command:\n\n```bash\n$ blockstack names\n```\n\nExample response:\n\n```json\n{\n    \"addresses\": [\n        {\n            \"address\": \"16EMaNw3pkn3v6f2BgnSSs53zAKH4Q8YJg\", \n            \"names_owned\": [\n                \"judecn.id\"\n            ]\n        }\n    ], \n    \"names_owned\": [\n        \"judecn.id\"\n    ]\n}\n```\n\n### Bitcoin Balance\n\nTo get your Bitcoin balance that can be used for name registrations, run the `blockstack balance` command:\n\n\n```bash\n$ blockstack balance\n```\n\nExpected response:\n\n```json\n{\n    \"addresses\": [\n        {\n            \"address\": \"1FWWR679EQ1h3v8RjegcvCDsvWqTVZKxe2\", \n            \"bitcoin\": 0.000959454, \n            \"satoshis\": 959454\n        }\n    ], \n    \"total_balance\": {\n        \"bitcoin\": 0.000959454, \n        \"satoshis\": 959454\n    }\n}\n```\n\n### Imports\n\nTo import a name into your local name wallet or receive it from another sender, use the `blockstack import` command to get an address to have the name sent to:\n\n```bash\n$ blockstack import\n```\n\nExpected response:\n\n```json\n{\n    \"address\": \"1KBUsvXmSRMUTxp1GhftnbvDeRaEM2D6MX\",\n    \"message\": \"Send the name you want to receive to the address specified.\"\n}\n```\n\n### Whois Info\n\nTo get various info on a given name, including when it was registered and the address it is owned by, run the `blockstack whois` command:\n\n```bash\n$ blockstack whois fredwilson.id\n```\n\nExample response:\n\n```json\n{\n    \"block_preordered_at\": 374084, \n    \"block_renewed_at\": 374084, \n    \"expire_block\": 489247, \n    \"has_zonefile\": true, \n    \"last_transaction_height\": 374084, \n    \"last_transaction_id\": \"2986ec31ec957692d7f5bc58a3b02d2ac2d1a60039e9163365fc954ff51aeb5a\", \n    \"owner_address\": \"1F2nHEDLRJ39XxAvSxwQhJsaVzvS5RHDRM\", \n    \"owner_script\": \"76a91499e7f97f5d2c77b4f32b4ed9ae0f0385c45aa5c788ac\", \n    \"zonefile_hash\": \"1a587366368aaf8477d5ddcea2557dcbcc67073e\"\n}\n```\n\n### Blockstack Server Updates\n\nTo update your settings interactively, use the `blockstack configure` command.  Hit [Enter] to select defaults.\n\nExample trace setting the blockstack server to `127.0.0.1` and the port to `8080`:\n\n```bash\n# blockstack configure\n\nYour client does not have enough information to connect\nto a Blockstack server.  Please supply the following\nparameters, or press [ENTER] to select the default value.\n\nblockchain_headers (default: '/Users/johnsmith/.blockstack/blockchain-headers.dat'): \nblockchain_writer (default: 'blockcypher'): \napi_endpoint_port (default: '6270'): \npoll_interval (default: '300'): \nmetadata (default: '/Users/johnsmith/.blockstack/metadata'): \nserver (default: 'node.blockstack.org'): 127.0.0.1\nblockchain_reader (default: 'blockcypher'): \nemail (default: ''): \nstorage_drivers_required_write (default: 'disk,blockstack_server'): \nport (default: '6264'): 8080\nqueue_path (default: '/Users/johnsmith/.blockstack/queues.db'): \nstorage_drivers (default: 'disk,blockstack_resolver,blockstack_server,http,dht'): \nclient_version (default: '0.14.0'): \nrpc_detach (default: 'True'): \nadvanced_mode (default: 'True'): \nanonymous_statistics (default: 'False'): \n\nBlockstack does not have enough information to connect\nto bitcoind.  Please supply the following parameters, or\npress [ENTER] to select the default value.\n\npasswd (default: 'blockstacksystem'): \nregtest (default: 'False'): \nserver (default: 'bitcoin.blockstack.com'): \nuser (default: 'blockstack'): \ntimeout (default: '300.0'): \nport (default: '8332'): \n\nBlockchain reader configuration\n\nPlease enter your Blockcypher API token.\n\napi_token (default: ''): \n\nBlockchain writer configuration\n\nPlease enter your Blockcypher API token.\n\napi_token (default: ''): \nSaving configuration to /Users/johnsmith/.blockstack/client.ini\n{\n    \"path\": \"/Users/johnsmith/.blockstack/client.ini\"\n}\n```\n","title":"Command Line - Extended Usage","description":"Dig deeper with Blockstack usage, including name transfers and more.","image":"/images/article-photos/astronaut.jpg"},"cli-installation":{"markdown":"\n\n### Installation\n\nThe quickest way to experience the power of Blockstack first hand is to install the command line interface and play around with looking up names and registering names.\n\nBelow you'll find the installation instructions for both OS X and Linux (Debian and Ubuntu).\n\n#### OS X Users\n\nInstallation on OS X requires `pip`. If you're running OS X, you should already have `pip` installed (it comes with Python), but if not make sure to install it using the following command:\n\n```bash\n$ brew install python\n```\n\nNext, use `pip2` (or `pip`) to install blockstack:\n\n```bash\n$ sudo pip2 install blockstack   # some systems use `pip` only; make sure it's the Python 2.x pip\n```\n\n#### Debian + Ubuntu Users\n\nInstallation on Debian + Ubuntu requires `pip` and `libssl`. First, make sure you have both:\n\n```bash\n$ sudo apt-get update && sudo apt-get install -y python-pip python-dev libssl-dev libffi-dev rng-tools\n```\n\nNext, use `pip2` to install pyparsing and then blockstack:\n\n```bash\n$ sudo pip2 install pyparsing\n$ sudo pip2 install blockstack\n```\n\n#### Windows Subsystem for Linux\n\nInstallation requires `pip` and `libssl`. First, make sure you have both:\n\n```bash\n$ sudo apt-get update && sudo apt-get install -y python-pip python-dev libssl-dev libffi-dev\n```\n\nNext, use `pip` to install functools32 and pyparsing modules, and then blockstack:\n\n```bash\n$ sudo pip install functools32 pyparsing\n$ sudo pip install blockstack\n```\n","title":"Command Line - Installation","description":"Get started by installing and configuring Blockstack.","image":"/images/article-photos/computer.jpg","next":"cli-basic-usage"},"code-layout":{"markdown":"\n\nAfter you've gotten familiar with the components above, you may want to take a deeper dive. Below you'll find some supporting libraries to dig into:\n\n- [Virtualchain](https://github.com/blockstack/virtualchain) - a Python library for creating virtual blockchains on top of any underlying blockchain\n- [Blockstack Auth JS](https://github.com/blockstack/blockstack-auth-js) - a JS library for generating and verifying auth requests and responses\n- [Blockstack Bootstrap](https://github.com/blockstack/blockstack-bootstrap) - a fork of Bootstrap in the Blockstack\n\n","title":"Further reading","description":"Extended listing of libraries.","image":"/images/article-photos/chalkboard.jpg"},"disclaimers":{"markdown":"\n\nEffective Date: October 12, 2017\n\nThe Blockstack Tokens are a crypto asset that is currently being developed by Blockstack Token LLC, a Delaware limited liability company, whose website can be found at www.blockstack.com. The website you are currently visiting (www.blockstack.org) is sponsored by Blockstack PBC, an affiliate of Blockstack Token LLC, and should not be viewed as an offer or sale of securities.\n","title":"Legal Disclaimers","description":"The legal disclaimers for blockstack.org","image":"/images/article-photos/chalkboard.jpg"},"explorer-installation":{"markdown":"\n\n### Developer Installation\n\nDevelopers can run a copy of the Blockstack name explorer.\n\nNote that installation requires Ubuntu 16.04.1 LTS and a user with root privileges.\n\nTo install the explorer, one must first set up a name explorer API and then set up a bitcore node, configured with the explorer frontend and a reference to the name explorer API.\n\n<p><b>Setting Up the Name Explorer API</b></p>\n\n1. Create and enter an installation directory: `mkdir /data && cd /data`\n1. Clone the blockstack explorer repo: `git clone git@github.com:blockstack/blockstack-explorer.git`\n1. Install flask and other dependencies: `pip install --upgrade Flask flask-crossdomain`\n1. Run the explorer API on port 5000: `./tools/runserver.py`\n\n<p><b>Setting Up Bitcore</p></b>\n\n1. Make sure apt-get is up to date: `apt-get update && apt-get dist-upgrade -y`\n1. Install python: `apt-get install python-pip python-dev libzmq3-dev -y`\n1. Get node: `curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -`\n1. Install node: `apt-get install -y nodejs`\n1. Install the bitcore node creator: `npm install -g bitcore-node`\n1. Create a bitcore node: `bitcore-node create /data/blockstack-bitcore`\n1. Enter into the folder for the node: `cd /data/blockstack-bitcore/`\n1. Install the insight API: `./node_modules/.bin/bitcore-node install insight-api`\n\n<p><b>Set Up the Frontend</p></b>\n\nThe easiest way to set up the frontend is to install it as a node package: `./node_modules/.bin/bitcore-node install git+https://github.com/blockstack/blockstack-explorer.git#master`\n\nIf you want to develop on the explorer, though, you can install the frontend in a separate folder:\n\n1. Remove the insight UI: `rm -Rf ./node_modules/insight-ui`\n1. Link to the new insight UI: `ln -s /data/blockstack-explorer ./node_modules/insight-ui`\n\n<p><b>Linking the Name Explorer API</p></b>\n\n1. Open the index.html file: `nano public/index.html`\n1. Update the script that includes `blockstackApiPrefix` to the following: `<script language=\"javascript\">window.blockstackApiPrefix = 'http://localhost:5000';</script>`\n\n<p><b>Starting Bitcore</p></b>\n\n1. Start bitcore: `./node_modules/.bin/bitcore-node start`\n1. Wait many hours (approximately a day) for the bitcore node to index the blockchain\n\n### Production Deployment\n\nOnce you've installed everything and the bitcore node has fully indexed the blockchain, your explorer should be ready for use.\n\nNext, you can update your OS settings to expose the frontend and the API, and then update your DNS settings to point to the IP address where its all running.\n\nNow you have your very own Blockstack Explorer.\n","title":"Explorer - Installation","description":"Get started by installing the Blockstack Browser.","image":"/images/article-photos/computer.jpg"},"how-blockstack-works":{"markdown":"\n\nWith the Blockstack Core software, a network of computers collectively maintain a global registry of domain names, public keys, and cryptographic hashes. With this registry, Blockstack Core serves as a decentralized domain name system (DNS) and decentralized public key infrastructure (PKI).\n\nWhen you run a Blockstack Core node, you join this network, which is more secure by design than traditional naming and digital registry systems. This is because the system's registry and its records are secured by an underlying blockchain, which is extremely resilient against tampering and control.\n\nIn the Blockstack Core registry, each of the names has an owner, represented by a cryptographic keypair, and is associated with instructions for how DNS resolvers and other software should resolve the name.\n\nBlockstack Core's DNS + PKI provides:\n\n- name lookups on a decentralized naming system\n- name registrations and transfers without centralized registrars\n- automatic binding of names to owning cryptographic keypairs\n- automatic cache invalidation\n- immunity to cache poisoning\n- robust certificate pinning capabilities\n- resistance to censorship of name registration and resolution\n\n#### Technical Overview\n\nBlockstack's domain name system is supported by a network of Blockstack nodes. Each of these nodes maintains a database of domain names, the cryptographic keypairs that own the names, and the data records the names resolve to.\n\nThe Blockstack nodes build and continuously update the name database by processing a sequence of name operations, which include name registrations, name transfers, updates of data records associated with names, and more.\n\nBlockstack name operations are embedded in the transactions of an underlying blockchain.  Once incorporated into a block, they are read and processed by all Blockstack nodes, where each node updates its local copy of the name database. Right now, there is only one network of Blockstack nodes, and it sits on top of the Bitcoin blockchain.\n\n<img src=\"/images/article-diagrams/blockstack-network.png\" class=\"img-fluid\" alt=\"The Blockstack Network\">\n\n#### Virtual Blockchains\n\nWhen a Blockstack node boots up, it derives a name database that matches the databases stored by all other nodes. It does this by connecting to a Bitcoin node that it trusts (ideally one that is local) and reading all of the transactions in the blockchain in sequence.\n\nIf a transaction has a sequence of data that identifies it as a Blockstack transaction, the node parses it, checks that it has both the proper form and it doesn't violate any authorization rules, and then adds it to the list of valid operations for that block.  Invalid transactions are ignored and discarded.  Once the sequence of operations for a block is validated, the Blockstack node executes them to update its name database.  Because each Blockstack node evaluates the same blockchain data, they will each calculate the same database.  For example, if a keypair issues an operation attempting to transfer a name that it doesn't own, the operation is flagged as invalid and discarded.  But if the keypair that actually owns the name issues a transfer operation, every Blockstack node processes the name transfer.\n\n<img src=\"/images/article-diagrams/virtual-blockchain.png\" class=\"img-fluid\" alt=\"Virtual Blockchains\">\n\nThe embedded sequence of valid Blockstack operations make up what is referred to as a virtual blockchain. That is because the transactions of the underlying blockchain are filtered and interpreted in a context that the underlying blockchain is not aware of.   Blockstack gives the transactions extra meaning; they otherwise look like normal transactions to the underlying blockchain's nodes. For example, a Bitcoin node may look at a Blockstack transaction and only see that bitcoins are moving from one address to another and that an unintelligible sequence of data has been attached in a data field (e.g. a field identified by OP_RETURN). Meanwhile, a Blockstack node will look at that data and will know how to interpret it in a way that updates the name database.\n\n#### Name Databases\n\nBlockstack nodes update their name databases by iterating through each block in the virtual blockchain and processing each of the operations in that block.  All operations are committed at the same time in a given block. Thus, two transfer operations on the same name will not be processed. Time marches forward in a quantized fashion, where every accepted operation is non-conflicting with every other operation in the block.\n\nThe first type of operation is a name preorder, where the sender announces that it will register an undisclosed name in the future.  It doesn't want to reveal the name yet, because doing so would allow an eavesdropping attacker to race the sender and steal the name. These operations do not result in any changes to the name database. Instead, they add a record to a pre-order pool.\n\nThe second type of operation is a name registration, where the sender announces it is registering a particular name and provides evidence that the name was preordered in a previous transaction.\n\nThese two operations together are known as a two-phase cryptographic commitment. In the preorder step, the value that is broadcasted is a hash of the name and the public key that the name should be registered under. Then, in the register step the name and public key are both revealed and the hash in the first step is verified.\n\nThe third type of operation is a name transfer, where the sender announces it is transferring ownership of a name it owns to another cryptographic keypair.\n\nThe fourth type of operation is a name update, where the sender announces it is replacing the name's associated data record with a new data record. In this operation, only the hash of the data record is provided in the transaction and the data itself is stored elsewhere.\n\n<img src=\"/images/article-diagrams/name-database.png\" class=\"img-fluid\" alt=\"Name Databases\">\n\nEven though only data record hashes are stored in blockchain transactions, we can use them to verify the authenticity and integrity of the data itself once we get it.  For example, you can host your data in S3, and other peers can verify your data by first obtaining the hash from Blockstack DNS and then checking it against your data's hash.  Because only the name's cryptographic keypair could have feasibly signed the transaction in the blockchain that announced the hash, it is safe to assume that the data is authentic.\n\n#### Data Record Storage\n\nBy default, Blockstack nodes store the data records in a distributed hash table (DHT) that all Blockstack nodes are connected to (the Blockstack nodes each have their own accompanying DHT nodes). Every Blockstack node knows to look in the DHT to resolve the hash of a data record to the data record itself.  The DHT is spam-proof--because each Blockstack node knows the entire set of data record hashes, it effectively has a data white-list.  It will only store data if its hash is in this set.\n\n<img src=\"/images/article-diagrams/data-record-storage.png\" class=\"img-fluid\" alt=\"Data Record Storage\">\n\nWhile the DHT is the default storage location for all data records, other copies of the data records may be stored in other locations. In fact, data mirrors may be set up that continuously crawl the DHT and maintain their own copies of the entire data set.  Blockstack nodes may be configured to look in these data mirrors first before looking in the DHT or anywhere else for the record, for better performance and higher availability.\n\nWhen a data record is sent to the DHT to be stored, the nodes of the DHT use their routing algorithm to collectively assign the record to be stored by a subset of the nodes. The number of nodes that store the record is specified by the replication factor. For example, a replication factor of 20 means that a minimum of 20 nodes will store the record.\n\nWhen a data record is looked up by its hash value, the nodes of the DHT coordinate to figure out which of the nodes can respond with the record and then one of those nodes responds to the requester with the appropriate value. The requester then checks to make sure that the value can be hashed to match the value hash that it used as the lookup term (known as a \"key\" in a key-value store, but not to be confused with a cryptographic key).  More information on DHTs can be found [here](https://en.wikipedia.org/wiki/Distributed_hash_table).  The Blockstack DNS reference implementation uses [Kademlia](https://en.wikipedia.org/wiki/Kademlia).\n\nBlockstack DNS uses the DHT as its built-in storage mechanism, but it also has a storage plugin system that allows you to mix and match different storage providers as you see fit for your records.  As long as other users have the same plugins, they can retrieve and validate the data records you publish.\n","title":"How Blockstack Works","description":"Learn how Blockstack works under the hood.","image":"/images/article-photos/typewriter.jpg","next":"blockstack-papers","date":"February 18, 2016"},"identity-attestation":{"markdown":"\n\nIdentities on Blockstack can be bare or they can be verified. Verification is done through the combination of both verifiable proofs and third party attestations.\n\n#### Verified Profiles\n\nUser-attested information in profiles can also be verified and become trusted information.\n\nThis allows users to provide evidence of who they are in other contexts, on the Internet or in real life.\n\nFor users to present their information as verified information, they must include a proof along with it.\n\nProofs can either be references to data on other social networks and software systems or they can be references to signed attestations by trusted authorities or peers.\n\n#### Verifiable Proofs\n\nHere are a few types of verifiable proofs that are supported:\n\n- **social network proofs** - users can show that they are a given user on Twitter, Facebook, or GitHub\n- **domain name proofs** - users can show that they own a given domain name or have admin access to the domain of a given organization\n- **key proofs** - users can show that they have control over certain PGP keys or ECDSA keys\n- **facial recognition proofs** - users can show that they look like a certain person in real life\n\nHere's an example of a social network proof:\n\n```json\n{\n  \"@type\": \"Account\",\n  \"service\": \"twitter\",\n  \"identifier\": \"naval\",\n  \"proofType\": \"http\",\n  \"proofUrl\": \"https://twitter.com/naval/status/486609266212499456\"\n}\n```\n\n#### Attestations\n\n- **peer attestations** - users can have multiple peers attest to information and then aggregate the attestations\n- **authority attestations** - users can have trusted authorities attest to information and reference the attestations\n\n#### Authority Attestations\n\nAuthorities may be primary sources or secondary sources. If a senior official of your univerity attests to your status at that university, then the university/official is considered a primary source. If your local DMV (Department of Motor Vehicles) attests to your birth date, that is considered a secondary source.\n\nHere's an example of a claim made by Naval about himself:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"naval.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"subject\": {\n    \"@id\": \"naval.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"name\": \"Naval Ravikant\"\n  }, \n  \"issuedAt\": \"2016-03-02T18:59:29.043Z\", \n  \"expiresAt\": \"2017-03-02T18:59:29.043Z\"\n}\n```\n\nAnd here is an example of an attestation made by the DMV of the state of California:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"california-dmv.id\",\n    \"publicKey\": \"03a59dbfd9612e4088818c90e19afcf8d1793b38a5c040c38d7d07bb7d39d86d72\"\n  },\n  \"subject\": {\n    \"@id\": \"naval.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"name\": \"Naval Ravikant\"\n  }, \n  \"issuedAt\": \"2016-03-10T17:01:32.879Z\",\n  \"expiresAt\": \"2017-03-10T17:01:32.879Z\"\n}\n```\n\n#### Peer Attestations\n\nPeer attestations can include references to any type of information. However, they are most commonly made about relationships between the peers.\n\nFor example, Alice can attest that she knows Bob and Bob can attest that he knows Alice. With this, we can be confident that Alice and Bob know one another.\n\nHere Alice is claiming that the list of people she knows includes Bob:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"alice.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"subject\": {\n    \"@id\": \"alice.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"knows\": [\n      {\n        \"@type\": \"Person\",\n        \"@id\": \"bob.id\"\n      }\n    ]\n  }, \n  \"issuedAt\": \"2016-03-02T18:59:29.043Z\", \n  \"expiresAt\": \"2017-03-02T18:59:29.043Z\"\n}\n```\n\nHere Bob is claiming that the list of people he knows includes Alice:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"bob.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"subject\": {\n    \"@id\": \"bob.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"knows\": [\n      {\n        \"@type\": \"Person\",\n        \"@id\": \"alice.id\"\n      }\n    ]\n  }, \n  \"issuedAt\": \"2016-03-02T18:59:29.043Z\", \n  \"expiresAt\": \"2017-03-02T18:59:29.043Z\"\n}\n```\n\nIn another example, we can show how an employee-employer relationship would be expressed.\n\nHere Naval is claiming he works for a company called AngelList:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"naval.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"subject\": {\n    \"@id\": \"naval.id\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"worksFor\": [\n      {\n        \"@type\": \"Organization\",\n        \"@id\": \"angellist.corp\",\n        \"name\": \"AngelList\"\n      }\n    ],\n  }, \n  \"issuedAt\": \"2016-03-02T18:59:29.043Z\", \n  \"expiresAt\": \"2017-03-02T18:59:29.043Z\"\n}\n```\n\nHere AngelList is claiming that it has an employee known as Naval:\n\n```json\n{\n  \"issuer\": {\n    \"@id\": \"angellist.corp\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"subject\": {\n    \"@id\": \"angellist.corp\",\n    \"publicKey\": \"02f1fd79dcd51bd017f71546ddc0fd3c8fb7de673da8661c4ceec0463dc991cc7e\"\n  },\n  \"claim\": {\n    \"employee\": [\n      {\n        \"@type\": \"Person\",\n        \"@id\": \"naval.id\"\n      }\n    ]\n  }, \n  \"issuedAt\": \"2016-03-02T18:59:29.043Z\", \n  \"expiresAt\": \"2017-03-02T18:59:29.043Z\"\n}\n```\n","title":"Identity Attestation","description":"Explore about identity attestations on Blockstack.","image":"/images/article-photos/cup.jpg","next":"light-clients","date":"March 28, 2016"},"namespaces":{"markdown":"\n\nBlockstack's DNS system allows anyone to create namespaces or directories for their decentralized applications.\n\nThe first namespace ever created is one for referring to user identities (TLD: <kbd>.id</kbd>). These identities are called \"blockchain IDs\" because they are identities registered on the blockchain. The blockchain ID namespace is being utilized by services like [Onename](https://onename.com), [Nametiles](http://nametiles.co), [OB1](http://ob1.io), [Bitseed](http://bitseed.org) and more.\n\n#### Namespaces Coming Soon\n\n<table class=\"table table-inverse\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>Tentative TLD</th>\n      <th>Purpose</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">1</th>\n      <td><kbd>.site</kbd></td>\n      <td>Directing users to websites with browsers like [ZeroNet](http://zeronet.io), [Brave](https://brave.com/) and [Metamask](https://metamask.io/)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">2</th>\n      <td><kbd>.media</kbd></td>\n      <td>Hosted media files on systems like [Mine](http://mine.nyc), [Ascribe](http://ascribe.io), [Monegraph](http://monegraph.com), [Verisart](http://www.verisart.com/) and [Alexandria](http://blocktech.com)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">3</th>\n      <td><kbd>.device</kbd></td>\n      <td>Devices on the internet of things with companies like [Filament](http://filament.com/) and [Philips](http://www.usa.philips.com/)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">4</th>\n      <td><kbd>.file</kbd></td>\n      <td>Notarized files on services like [Stampery](http://stampery.co) and [Tierion](https://tierion.com/)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">5</th>\n      <td><kbd>.store</kbd></td>\n      <td>E-commerce stores on decentralized commerce platforms like [OpenBazaar](http://openbazaar.org) and [BitMarkets](http://bitmarkets.org)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">6</th>\n      <td><kbd>.directory</kbd></td>\n      <td>Directories on distributed file systems like [IPFS](http://ipfs.io) (readable names instead of hashes)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">7</th>\n      <td><kbd>.git</kbd></td>\n      <td>Code repositories on services like [GitLab](https://about.gitlab.com/)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">8</th>\n      <td><kbd>.product</kbd></td>\n      <td>Physical items listed on services like [Everledger](http://www.everledger.io/)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">9</th>\n      <td><kbd>.land</kbd></td>\n      <td>Land titles listed by various land title registry organizations</td>\n    </tr>\n  </tbody>\n</table>\n\nFor help creating your own namespace, reach out to other Blockstack members in [the Blockstack Slack group](http://chat.blockstack.org).\n","title":"Namespaces","description":"Learn what namespaces are and what they can be used for.","image":"/images/article-photos/bookshelves.jpg","next":"blockchain-identity","date":"February 19, 2016"},"privacy-policy":{"markdown":"\n\nEffective Date: October 12, 2017\n\nThis Privacy Policy is incorporated by this reference into the Blockstack PBC Terms of Use (the “TOU”). The terms “Blockstack,” “we,” “our” and “us” include Blockstack PBC and our affiliates and subsidiaries. All other capitalized terms not defined in this Privacy Policy will have the meanings set forth in the TOU. This Privacy Policy explains how Blockstack may collect, use, and disclose information we obtain through the Site.\n\n### When Blockstack Collects Your Information\n\nMailing List Sign-Up. We collect your email address when you sign up on the Site to receive updates about upcoming product launches.\n\nCustomer Support. We collect information that you provide to us through your communications with our customer-support team.\n\nCookies, Automatic Data Collection, and Related Technologies. The Site collects and stores information that is generated automatically as you use it, including your preferences and anonymous usage statistics.\n\nWhen you visit the Site, we and our third party service providers receive and record information on our server logs from your browser, including your IP address, and from cookies and similar technologies. Cookies are small text files placed on your computer browser when you visit a website. Our service providers may collect information about your online activities over time and across different online services. Most browsers allow you to block and delete cookies. However, if you do that, then the Site may not work properly.\n\nBy using the Site, you are authorizing us to gather, parse, and retain data related to the provision of\nthe Site.\n\n### How Blockstack Uses Your Information\n\nInternal and Site-Related Usage. We may use and retain any information that we collect on the Site to provide, maintain and improve the Site and our products and services, and to otherwise conduct our business. One of the service providers that we use for data analytics is Google Analytics. If you do not want Google Analytics to collect and use information about your use of the Site, then you can install an opt-out in your web browser\t(https://tools.google.com/dlpage/gaoptout/).\n\nCommunications. We may send emails to the email address you provide to us to provide you with updates and news about Blockstack and/or the Site and for operational purposes, such as customer service or system maintenance.\n\nMarketing. We may use information that we collect on the Site to provide online advertising on the Site and to facilitate transmittal of information that may be useful, relevant, valuable or otherwise of interest to you.\n\nAggregate Data. We may de-identify and aggregate data collected through the Site and use it for any lawful purpose.\n\n### Blockstack May Disclose Your Information\n\nWe Use Vendors and Service Providers. We may share any information that we receive through the Site with vendors and service providers retained in connection with the provision of the Site.\nMarketing. We do not rent, sell, or share personal information (as defined by California Civil Code § 1798.83) collected through the Site about you with other people or nonaffiliated companies for their direct marketing purposes, unless we have your permission.\n\nAs Required By Law and Similar Disclosures. We may access, preserve, and disclose your information if we believe doing so is required or appropriate to: (1) comply with law enforcement requests and legal process, such as a court order or subpoena; (2) respond to your requests; or (3) protect your, our or others’ rights, property, or safety.\n\nMerger, Sale, or Other Asset Transfers. If we are involved in a merger, acquisition, financing due diligence, reorganization, bankruptcy, receivership, sale of assets, or transition of service to another provider, then your information may be sold or transferred as part of such a transaction as permitted by law and/or contract. The use of your information following any of the foregoing events will be governed by the provisions of the Privacy Policy in effect at the time such information was collected by Blockstack.\n\nConsent. We may also disclose your information with your permission.\n\n### Do Not Track\n\nSome web browsers incorporate a “Do Not Track” feature. Because there is not yet an accepted standard for how to respond to Do Not Track signals, our Site does not currently respond to such signals.\n\n### Security of Your Information\n\nWe use certain physical, organizational, and technical safeguards that are designed to maintain the integrity and security of information that we collect. Please be aware that no security measures are perfect or impenetrable and thus we cannot and do not guarantee that your information will not be accessed, viewed, disclosed, altered, or destroyed by breach of any of our physical, technical, or organizational safeguards.\n\n### Your Choices and Access\n\nFrom time to time, we may send marketing e-mail messages to our Users. If you no longer want to receive such emails from us on a going forward basis, then you may opt-out via the “unsubscribe” link provided in each such email.\n\n### Children’s Privacy\n\nWe do not knowingly collect, maintain, or use personal information, as defined by the Federal Trade Commission’s Children’s Online Privacy Protection Act Rule, from children under 13 years of age, and no part of the Site is directed to children under the age of 13. If you learn that your child has provided us with personal information without your consent, then you may alert us at editors@blockstack.org. If we learn that we have collected any personal information from children under 13, then we will promptly take steps to delete such information.\n\n### International users\n\nIf you visit the Site from the European Union or other regions with laws governing data collection and use, then you agree to the transfer of your information to the United States and processing globally. By providing your information to the Site, you consent to any transfer and processing in accordance with this Privacy Policy.\n\n### Changes to Our Privacy Policy and Practices\n\nPosting of Revised Privacy Policy. We will post any adjustments to the Privacy Policy on this web page, and the revised version will be effective when it is posted. If you are concerned about how your information is used, then bookmark this page and read this Privacy Policy periodically.\n\nNew Uses of Information. From time-to-time, we may desire to use information for uses not previously disclosed in our Privacy Policy. If our practices change regarding previously collected information in a way that would be materially less restrictive than stated in the version of this Privacy Policy in effect at the time we collected the information, then we will make reasonable efforts to provide notice and obtain consent to any such uses as may be required by law.\n\n### Contact Information\n\nBlockstack PBC.  \n319 Lafayette St. #136  \nNew York, New York 10012  \nTelephone: (212) 634-4254  \nEmail: legal@blockstack.org\n","title":"Privacy Policy","description":"The privacy policy for blockstack.org","image":"/images/article-photos/chalkboard.jpg"},"terms-of-use":{"markdown":"\n\nVERSION 1.0\nLAST REVISED ON: OCTOBER 12, 2017\n\nThe website located at blockstack.org (the “Site”) is a copyrighted work belonging to Blockstack PBC (“Company”, “us”, “our”, and “we”).  Certain features of the Site may be subject to additional guidelines, terms, or rules, which will be posted on the Site in connection with such features.  All such additional terms, guidelines, and rules are incorporated by reference into these Terms.\n\nTHESE TERMS OF USE (THESE “TERMS”) SET FORTH THE LEGALLY BINDING TERMS AND CONDITIONS THAT GOVERN YOUR USE OF THE SITE.  BY ACCESSING OR USING THE SITE, YOU ARE ACCEPTING THESE TERMS (ON BEHALF OF YOURSELF OR THE ENTITY THAT YOU REPRESENT), AND YOU REPRESENT AND WARRANT THAT YOU HAVE THE RIGHT, AUTHORITY, AND CAPACITY TO ENTER INTO THESE TERMS (ON BEHALF OF YOURSELF OR THE ENTITY THAT YOU REPRESENT).  YOU MAY NOT ACCESS OR USE THE SITE OR ACCEPT THE TERMS IF YOU ARE NOT AT LEAST 18 YEARS OLD.  IF YOU DO NOT AGREE WITH ALL OF THE PROVISIONS OF THESE TERMS, DO NOT ACCESS AND/OR USE THE SITE.\n\nTHESE TERMS REQUIRE THE USE OF ARBITRATION (SECTION 8.2) ON AN INDIVIDUAL BASIS TO RESOLVE DISPUTES, RATHER THAN JURY TRIALS OR CLASS ACTIONS, AND ALSO LIMIT THE REMEDIES AVAILABLE TO YOU IN THE EVENT OF A DISPUTE.\n\n### 1. ACCOUNTS \n\n**Account Creation:** In order to use certain features of the Site, you must register for an account (“Account”) and provide certain information about yourself as prompted by the account registration form.  You represent and warrant that: (a) all required registration information you submit is truthful and accurate; (b) you will maintain the accuracy of such information. You may delete your Account at any time, for any reason, by following the instructions on the Site.  Company may suspend or terminate your Account in accordance with Section 7. \n\n**Account Responsibilities:** You are responsible for maintaining the confidentiality of your Account login information and are fully responsible for all activities that occur under your Account.  You agree to immediately notify Company of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security.  Company cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements.\n\n### 2. ACCESS TO THE SITE\n\n**License:** Subject to these Terms, Company grants you a non-transferable, non-exclusive, revocable, limited license to use and access the Site solely for your own personal, noncommercial use.\n\n**Certain Restrictions:** The rights granted to you in these Terms are subject to the following restrictions: (a) you shall not license, sell, rent, lease, transfer, assign, distribute, host, or otherwise commercially exploit the Site, whether in whole or in part, or any content displayed on the Site; (b) you shall not modify, make derivative works of, disassemble, reverse compile or reverse engineer any part of the Site; (c) you shall not access the Site in order to build a similar or competitive website, product, or service; and (d) except as expressly stated herein, no part of the Site may be copied, reproduced, distributed, republished, downloaded, displayed, posted or transmitted in any form or by any means.  Unless otherwise indicated, any future release, update, or other addition to functionality of the Site shall be subject to these Terms.  All copyright and other proprietary notices on the Site (or on any content displayed on the Site) must be retained on all copies thereof.\n\n**Modification:** Company reserves the right, at any time, to modify, suspend, or discontinue the Site (in whole or in part) with or without notice to you.  You agree that Company will not be liable to you or to any third party for any modification, suspension, or discontinuation of the Site or any part thereof.\n\n**No Support or Maintenance.**  You acknowledge and agree that Company will have no obligation to provide you with any support or maintenance in connection with the Site.\n\n**Ownership.**  You acknowledge that all the intellectual property rights, including copyrights, patents, trade marks, and trade secrets, in the Site and its content are owned by Company or Company’s suppliers.  Neither these Terms (nor your access to the Site) transfers to you or any third party any rights, title or interest in or to such intellectual property rights, except for the limited access rights expressly set forth in Section 2.1. Company and its suppliers reserve all rights not granted in these Terms.  There are no implied licenses granted under these Terms.\n\n### 3. INDEMNIFICATION\n\nYou agree to indemnify and hold Company (and its officers, employees, and agents) harmless, including costs and attorneys’ fees, from any claim or demand made by any third party due to or arising out of (a) your use of the Site, (b) your violation of these Terms or (c) your violation of applicable laws or regulations.  Company reserves the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate with our defense of these claims.  You agree not to settle any matter without the prior written consent of Company.  Company will use reasonable efforts to notify you of any such claim, action or proceeding upon becoming aware of it.\n\n### 4. THIRD-PARTY LINKS & ADS; OTHER USERS\n\n**Third-Party Links & Ads.** The Site may contain links to third-party websites and services, and/or display advertisements for third parties (collectively, “Third-Party Links & Ads”).  Such Third-Party Links & Ads are not under the control of Company, and Company is not responsible for any Third-Party Links & Ads.  Company provides access to these Third-Party Links & Ads only as a convenience to you, and does not review, approve, monitor, endorse, warrant, or make any representations with respect to Third-Party Links & Ads.  You use all Third-Party Links & Ads at your own risk, and should apply a suitable level of caution and discretion in doing so. When you click on any of the Third-Party Links & Ads, the applicable third party’s terms and policies apply, including the third party’s privacy and data gathering practices.  You should make whatever investigation you feel necessary or appropriate before proceeding with any transaction in connection with such Third-Party Links & Ads.\n\n**Other Users.**  Your interactions with other Site users are solely between you and such users.  You agree that Company will not be responsible for any loss or damage incurred as the result of any such interactions.  If there is a dispute between you and any Site user, we are under no obligation to become involved.\n\n**Release.**  You hereby release and forever discharge the Company (and our officers, employees, agents, successors, and assigns) from, and hereby waive and relinquish, each and every past, present and future dispute, claim, controversy, demand, right, obligation, liability, action and cause of action of every kind and nature (including personal injuries, death, and property damage), that has arisen or arises directly or indirectly out of, or that relates directly or indirectly to, the Site (including any interactions with, or act or omission of, other Site users or any Third-Party Links & Ads).  IF YOU ARE A CALIFORNIA RESIDENT, YOU HEREBY WAIVE CALIFORNIA CIVIL CODE SECTION 1542 IN CONNECTION WITH THE FOREGOING, WHICH STATES: “A GENERAL RELEASE DOES NOT EXTEND TO CLAIMS WHICH THE CREDITOR DOES NOT KNOW OR SUSPECT TO EXIST IN HIS OR HER FAVOR AT THE TIME OF EXECUTING THE RELEASE, WHICH IF KNOWN BY HIM OR HER MUST HAVE MATERIALLY AFFECTED HIS OR HER SETTLEMENT WITH THE DEBTOR.”\n\n### 5. DISCLAIMERS \n\nTHE SITE IS PROVIDED ON AN “AS-IS” AND “AS AVAILABLE” BASIS, AND COMPANY (AND OUR SUPPLIERS) EXPRESSLY DISCLAIM ANY AND ALL WARRANTIES AND CONDITIONS OF ANY KIND, WHETHER EXPRESS, IMPLIED, OR STATUTORY, INCLUDING ALL WARRANTIES OR CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, QUIET ENJOYMENT, ACCURACY, OR NON-INFRINGEMENT.  WE (AND OUR SUPPLIERS) MAKE NO WARRANTY THAT THE SITE WILL MEET YOUR REQUIREMENTS, WILL BE AVAILABLE ON AN UNINTERRUPTED, TIMELY, SECURE, OR ERROR-FREE BASIS, OR WILL BE ACCURATE, RELIABLE, FREE OF VIRUSES OR OTHER HARMFUL CODE, COMPLETE, LEGAL, OR SAFE.  IF APPLICABLE LAW REQUIRES ANY WARRANTIES WITH RESPECT TO THE SITE, ALL SUCH WARRANTIES ARE LIMITED IN DURATION TO NINETY (90) DAYS FROM THE DATE OF FIRST USE.\n\nSOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  SOME JURISDICTIONS DO NOT ALLOW LIMITATIONS ON HOW LONG AN IMPLIED WARRANTY LASTS, SO THE ABOVE LIMITATION MAY NOT APPLY TO YOU.  \n\n### 6. LIMITATION ON LIABILITY\n\nTO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL COMPANY (OR OUR SUPPLIERS) BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY LOST PROFITS, LOST DATA, COSTS OF PROCUREMENT OF SUBSTITUTE PRODUCTS, OR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATING TO THESE TERMS OR YOUR USE OF, OR INABILITY TO USE, THE SITE, EVEN IF COMPANY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  ACCESS TO, AND USE OF, THE SITE IS AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR DEVICE OR COMPUTER SYSTEM, OR LOSS OF DATA RESULTING THEREFROM.  \n\nTO THE MAXIMUM EXTENT PERMITTED BY LAW, NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, OUR LIABILITY TO YOU FOR ANY DAMAGES ARISING FROM OR RELATED TO THIS AGREEMENT (FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION), WILL AT ALL TIMES BE LIMITED TO A MAXIMUM OF FIFTY US DOLLARS (U.S. $50). THE EXISTENCE OF MORE THAN ONE CLAIM WILL NOT ENLARGE THIS LIMIT.  YOU AGREE THAT OUR SUPPLIERS WILL HAVE NO LIABILITY OF ANY KIND ARISING FROM OR RELATING TO THIS AGREEMENT.\n\nSOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THE ABOVE LIMITATION OR EXCLUSION MAY NOT APPLY TO YOU.   \n\n### 7. TERM AND TERMINATION.\n\nSubject to this Section, these Terms will remain in full force and effect while you use the Site.  We may suspend or terminate your rights to use the Site (including your Account) at any time for any reason at our sole discretion, including for any use of the Site in violation of these Terms.  Upon termination of your rights under these Terms, your Account and right to access and use the Site will terminate immediately.   Company will not have any liability whatsoever to you for any termination of your rights under these Terms, including for termination of your Account.  Even after your rights under these Terms are terminated, the following provisions of these Terms will remain in effect: Sections 2.2 through 2.5 and Sections 3 through 8.\n\t\n### 8. GENERAL\n\n**Changes.**  These Terms are subject to occasional revision, and if we make any substantial changes, we may notify you by sending you an e-mail to the last e-mail address you provided to us (if any), and/or by prominently posting notice of the changes on our Site.  You are responsible for providing us with your most current e-mail address.  In the event that the last e-mail address that you have provided us is not valid, or for any reason is not capable of delivering to you the notice described above, our dispatch of the e-mail containing such notice will nonetheless constitute effective notice of the changes described in the notice.  Any changes to these Terms will be effective upon the earlier of thirty (30) calendar days following our dispatch of an e-mail notice to you (if applicable) or thirty (30) calendar days following our posting of notice of the changes on our Site.  These changes will be effective immediately for new users of our Site.  Continued use of our Site following notice of such changes shall indicate your acknowledgement of such changes and agreement to be bound by the terms and conditions of such changes.\n\n**Dispute Resolution.** Please read this Arbitration Agreement carefully.  It is part of your contract with Company and affects your rights.  It contains procedures for MANDATORY BINDING ARBITRATION AND A CLASS ACTION WAIVER.\n\n(a)\tApplicability of Arbitration Agreement.  All claims and disputes (excluding claims for injunctive or other equitable relief as set forth below) in connection with the Terms or the use of any product or service provided by the Company that cannot be resolved informally or in small claims court shall be resolved by binding arbitration on an individual basis under the terms of this Arbitration Agreement.  Unless otherwise agreed to, all arbitration proceedings shall be held in English.  This Arbitration Agreement applies to you and the Company, and to any subsidiaries, affiliates, agents, employees, predecessors in interest, successors, and assigns, as well as all authorized or unauthorized users or beneficiaries of services or goods provided under the Terms.\n\n(b)\tNotice Requirement and Informal Dispute Resolution.  Before either party may seek arbitration, the party must first send to the other party a written Notice of Dispute (“Notice”) describing the nature and basis of the claim or dispute, and the requested relief.  A Notice to the Company should be sent to: 319 Lafayette St. #136, New York, California  10012.  After the Notice is received, you and the Company may attempt to resolve the claim or dispute informally.  If you and the Company do not resolve the claim or dispute within thirty (30) days after the Notice is received, either party may begin an arbitration proceeding.  The amount of any settlement offer made by any party may not be disclosed to the arbitrator until after the arbitrator has determined the amount of the award, if any, to which either party is entitled.\n\n(c)\tArbitration Rules.  Arbitration shall be initiated through the American Arbitration Association (“AAA”), an established alternative dispute resolution provider (“ADR Provider”) that offers arbitration as set forth in this section.  If AAA is not available to arbitrate, the parties shall agree to select an alternative ADR Provider.  The rules of the ADR Provider shall govern all aspects of the arbitration, including but not limited to the method of initiating and/or demanding arbitration, except to the extent such rules are in conflict with the Terms.  The AAA Consumer Arbitration Rules (“Arbitration Rules”) governing the arbitration are available online at www.adr.org or by calling the AAA at 1-800-778-7879.  The arbitration shall be conducted by a single, neutral arbitrator.  Any claims or disputes where the total amount of the award sought is less than Ten Thousand U.S. Dollars (US $10,000.00) may be resolved through binding non-appearance-based arbitration, at the option of the party seeking relief.  For claims or disputes where the total amount of the award sought is Ten Thousand U.S. Dollars (US $10,000.00) or more, the right to a hearing will be determined by the Arbitration Rules.  Any hearing will be held in a location within 100 miles of your residence, unless you reside outside of the United States, and unless the parties agree otherwise.  If you reside outside of the U.S., the arbitrator shall give the parties reasonable notice of the date, time and place of any oral hearings. Any judgment on the award rendered by the arbitrator may be entered in any court of competent jurisdiction.  If the arbitrator grants you an award that is greater than the last settlement offer that the Company made to you prior to the initiation of arbitration, the Company will pay you the greater of the award or $2,500.00.  Each party shall bear its own costs (including attorney’s fees) and disbursements arising out of the arbitration and shall pay an equal share of the fees and costs of the ADR Provider.\n\n(d)\tAdditional Rules for Non-Appearance Based Arbitration.  If non-appearance based arbitration is elected, the arbitration shall be conducted by telephone, online and/or based solely on written submissions; the specific manner shall be chosen by the party initiating the arbitration.  The arbitration shall not involve any personal appearance by the parties or witnesses unless otherwise agreed by the parties.\n\n(e)\tTime Limits.  If you or the Company pursue arbitration, the arbitration action must be initiated and/or demanded within the statute of limitations (i.e., the legal deadline for filing a claim) and within any deadline imposed under the AAA Rules for the pertinent claim.\n\n(f)\tAuthority of Arbitrator.  If arbitration is initiated, the arbitrator will decide the rights and liabilities, if any, of you and the Company, and the dispute will not be consolidated with any other matters or joined with any other cases or parties.  The arbitrator shall have the authority to grant motions dispositive of all or part of any claim.  The arbitrator shall have the authority to award monetary damages, and to grant any non-monetary remedy or relief available to an individual under applicable law, the AAA Rules, and the Terms.  The arbitrator shall issue a written award and statement of decision describing the essential findings and conclusions on which the award is based, including the calculation of any damages awarded.  The arbitrator has the same authority to award relief on an individual basis that a judge in a court of law would have.  The award of the arbitrator is final and binding upon you and the Company.\n\n(g)\tWaiver of Jury Trial.  THE PARTIES HEREBY WAIVE THEIR CONSTITUTIONAL AND STATUTORY RIGHTS TO GO TO COURT AND HAVE A TRIAL IN FRONT OF A JUDGE OR A JURY, instead electing that all claims and disputes shall be resolved by arbitration under this Arbitration Agreement.  Arbitration procedures are typically more limited, more efficient and less costly than rules applicable in a court and are subject to very limited review by a court.  In the event any litigation should arise between you and the Company in any state or federal court in a suit to vacate or enforce an arbitration award or otherwise, YOU AND THE COMPANY WAIVE ALL RIGHTS TO A JURY TRIAL, instead electing that the dispute be resolved by a judge.\n\n(h)\tWaiver of Class or Consolidated Actions.  ALL CLAIMS AND DISPUTES WITHIN THE SCOPE OF THIS ARBITRATION AGREEMENT MUST BE ARBITRATED OR LITIGATED ON AN INDIVIDUAL BASIS AND NOT ON A CLASS BASIS, AND CLAIMS OF MORE THAN ONE CUSTOMER OR USER CANNOT BE ARBITRATED OR LITIGATED JOINTLY OR CONSOLIDATED WITH THOSE OF ANY OTHER CUSTOMER OR USER.  \n\n(i)\tConfidentiality.  All aspects of the arbitration proceeding, including but not limited to the award of the arbitrator and compliance therewith, shall be strictly confidential.  The parties agree to maintain confidentiality unless otherwise required by law.  This paragraph shall not prevent a party from submitting to a court of law any information necessary to enforce this Agreement, to enforce an arbitration award, or to seek injunctive or equitable relief.\n\n(j)\tSeverability.  If any part or parts of this Arbitration Agreement are found under the law to be invalid or unenforceable by a court of competent jurisdiction, then such specific part or parts shall be of no force and effect and shall be severed and the remainder of the Agreement shall continue in full force and effect.\n\n(k)\tRight to Waive.  Any or all of the rights and limitations set forth in this Arbitration Agreement may be waived by the party against whom the claim is asserted.  Such waiver shall not waive or affect any other portion of this Arbitration Agreement.\n\n(l)\tSurvival of Agreement.  This Arbitration Agreement will survive the termination of your relationship with Company.  \n\n(m)\tSmall Claims Court.  Notwithstanding the foregoing, either you or the Company may bring an individual action in small claims court.\n\n(n)\tEmergency Equitable Relief.  Notwithstanding the foregoing, either party may seek emergency equitable relief before a state or federal court in order to maintain the status quo pending arbitration.  A request for interim measures shall not be deemed a waiver of any other rights or obligations under this Arbitration Agreement.\n\n(o)\tClaims Not Subject to Arbitration.  Notwithstanding the foregoing, claims of defamation, violation of the Computer Fraud and Abuse Act, and infringement or misappropriation of the other party’s patent, copyright, trademark or trade secrets shall not be subject to this Arbitration Agreement.\n\n(p)\tCourts.  In any circumstances where the foregoing Arbitration Agreement permits the parties to litigate in court, the parties hereby agree to submit to the personal jurisdiction of the courts located within United States County, California, for such purpose \n\n**Export.** The Site may be subject to U.S. export control laws and may be subject to export or import regulations in other countries. You agree not to export, reexport, or transfer, directly or indirectly, any U.S. technical data acquired from Company, or any products utilizing such data, in violation of the United States export laws or regulations. \n\n**Disclosures.**  Company is located at the address in Section 8.8. If you are a California resident, you may report complaints to the Complaint Assistance Unit of the Division of Consumer Product of the California Department of Consumer Affairs by contacting them in writing at 400 R Street, Sacramento, CA 95814, or by telephone at (800) 952-5210.\n\n**Electronic Communications.**  The communications between you and Company use electronic means, whether you use the Site or send us emails, or whether Company posts notices on the Site or communicates with you via email. For contractual purposes, you (a) consent to receive communications from Company in an electronic form; and (b) agree that all terms and conditions, agreements, notices, disclosures, and other communications that Company provides to you electronically satisfy any legal requirement that such communications would satisfy if it were be in a hardcopy writing. The foregoing does not affect your non-waivable rights.\n\n**Entire Terms.** These Terms constitute the entire agreement between you and us regarding the use of the Site. Our failure to exercise or enforce any right or provision of these Terms shall not operate as a waiver of such right or provision. The section titles in these Terms are for convenience only and have no legal or contractual effect. The word “including” means “including without limitation”.  If any provision of these Terms is, for any reason, held to be invalid or unenforceable, the other provisions of these Terms will be unimpaired and the invalid or unenforceable provision will be deemed modified so that it is valid and enforceable to the maximum extent permitted by law.  Your relationship to Company is that of an independent contractor, and neither party is an agent or partner of the other.  These Terms, and your rights and obligations herein, may not be assigned, subcontracted, delegated, or otherwise transferred by you without Company’s prior written consent, and any attempted assignment, subcontract, delegation, or transfer in violation of the foregoing will be null and void.  Company may freely assign these Terms.  The terms and conditions set forth in these Terms shall be binding upon assignees. \n\n**Copyright/Trademark Information.**  Copyright © 2017 Blockstack PBC. All rights reserved.  All trademarks, logos and service marks (“Marks”) displayed on the Site are our property or the property of other third parties. You are not permitted to use these Marks without our prior written consent or the consent of such third party which may own the Marks.\n\n**Contact Information:**\n\nBlockstack PBC  \n319 Lafayette St. #136  \nNew York, New York  10012  \nTelephone: (212) 634-4254  \nEmail: legal@blockstack.org\n","title":"Terms of Use","description":"The terms of use for blockstack.org","image":"/images/article-photos/chalkboard.jpg"},"faqs":{"markdown":"\n\n# Frequently Asked Questions\n\n### What is Blockstack?\n\nBlockstack is the new decentralized internet.\n\nWith Blockstack, users control their data and apps run on their devices. There are no middlemen, no passwords, no massive data silos to breach, and no services tracking us around the internet.\n\nThe applications on blockstack are server-less and decentralized. Developers start by building a single-page application in Javascript, Then, instead of plugging the frontend into a centralized API, they plug into an API run by the user. Developers install a library called `blockstack.js` and don't have to worry about running servers, maintaining databases, or building out user management systems.\n\nPersonal user APIs ship with the Blockstack app and handle everything from identity and authentication to data storage. Applications can request permissions from users and then gain read and write access to user resources.\n\nData storage is simple and reliable and uses existing cloud infrastructure. Users connect with their Dropbox, Google Drive, S3, etc... and data is synced from their local device up to their cloud.\n\nIdentity is user-controlled and utilizes the blockchain for secure management of keys, devices and usernames. When users login with apps, they are anonymous by default and use an app-specific key, but their full identity can be revealed and proven at any time. Keys are for signing and encryption and can be changed as devices need to be added or removed.\n\nUnder the hood, Blockstack provides a decentralized domain name system (DNS), decentralized public key distribution system, and registry for apps and user identities.\n\n### What is a Blockstack ID?\n\nThis is your name & identity that is registered in the .id namespace on Blockstack. Your personal data and storage are built around this ID. Apps that want to access your data use your permission and identity to find it.\n\n### What is a decentralized internet?\n\nA decentralized internet is one where users don't need to trust any intermediaries or remote services. We envision a world where users control their own data, and power flows back to the users. Reducing the friction to deploying new Blockstack nodes is an important step towards that mission.\n\n### What problems does Blockstack solve?\n\nDevelopers can now build Web applications where:\n\n* you own your data, not the application\n* you control where your data is stored\n* you control who can access your data\n\nDevelopers can now build Web applications where:\n\n* you don't have to deal with passwords\n* you don't have to host everyone's data\n* you don't have to run app-specific servers\n\nRight now, Web application users are \"digital serfs\" and applications are the \"digital landlords\". Users don't own their data; the app owns it. Users don't control where data gets stored; they can only store it on the application. Users don't control access to it; they only advise the application on how to control access (which the application can ignore).\n\nBlockstack applications solve both sets of problems. Users pick and choose highly-available storage providers like Dropbox or BitTorrent to host their data, and applications read it with the user's consent. Blockstack ensures that all data is signed and verified and (optionally) encrypted end-to-end, so users can treat storage providers like dumb hard drives: if you don't like yours, you can swap it out with a better one. Users can take their data with them if they leave the application, since it was never the application's in the first place.\n\nAt the same time, developers are no longer on the hook for hosting user data. Since users bring their own storage and use public-key cryptography for authentication, applications don't have to store anything--there's nothing to steal when they get hacked. Moreover, many Web applications today can be re-factored so that everything happens client-side, obviating the need for running dedicated application servers.\n\n### What is a \"serverless\" app?\n\nThe application itself should not run application-specific functionality on a server. All of its functionality should run on end-points. However, the application may use non-app-specific servers with the caveat that they must not be part of the trusted computing base. This is the case with storage systems like Amazon S3 and Dropbox, for example, because Blockstack's data is signed and verified end-to-end (so the storage systems are not trusted to serve data). Serverless can also mean applications where some amount of server-side logic is still written by the application developer but unlike traditional architectures is run in stateless compute containers that are event-triggered, ephemeral (may only last for one invocation)\n\n### What is a \"decentralized\" app?\n\nDecentralized apps are a new type of software program designed to exist on the Internet in a way that is not controlled by any single entity. Where bitcoin is a decentralized value exchange, a decentralized application aims to achieve functionality beyond transactions that exchange value. Many types of decentralized apps are starting to emerge as blockchain technology continues to progress. More companies and individuals are seeing the potential for what can be achieved in decentralizing not just money but almost any type of computing imaginable.\n\nDecentralized apps potentially represent the next generation of computing. In a completely decentralized world all things occur using peer-to-peer networks and the idea of centralized entities are non-existent. This distributed future is still being designed and built but the early stages of development are looking promising.\n\n### Who should build on Blockstack?\n\nEveryone! But more seriously, if you are building an application in JavaScript that requires sign-in and storage you should look at using Blockstack. The APIs we provide are not only decentralized (No dependency on Google, Facebook, or other OAuth provider) but easier to use than traditional OAuth. Also you no longer have to maintain and secure databases with all your user information. That data is stored securely with the people who created it.\n\n### How are Blockstack domains different from normal DNS domains?\n\nBlockstack domains are not registered on the traditional DNS run by an organized called ICANN. Instead they're registered on a blockchain in a fully decentralized way. This means that Blockstack domains are truly owned by their owners and cannot be taken away. All Blockstack domains have public keys by default (public keys are required to own the domains), unlike the traditional DNS where a small fraction of domains get the (optional) public key certificates.\n\n### What is a virtual chain?\n\nBlockstack is designed around a \"virtual chain\" concept, where nodes only need to reach consensus on the shared \"virtual chain\" they're interested in. Virtual chains do not interact with one another, and a single blockchain can host many virtual chains. These virtual chains can live in any blockchain for which there exists a driver, and virtual chain clients only need to execute their virtual chain transactions (i.e. Blockstack only processes Blockstack virtual chain transactions).\n\n### What is Blockstack Core and who is working on it?\n\nBlockstack Core is the reference implementation of the Blockstack protocol described in our white paper. It consists of a couple of parts:\n\n- Virtualchain implementation: This is a python library that parses the underlying blockchain (Bitcoin) and builds the state of the Blockstack DNS.\n- Blockstack Core: Uses the Virtualchain to build the DNS state and comes to a consensus on that state in a peer network (Atlas).\n- Blockstack API: Indexes the data stored by Blockstack Core and makes it available in a performant way to applications.\n\nThe project is open-source and anyone can contribute! The major contributors are mostly employees of Blockstack PBC. You can see the full list of contributors here: https://github.com/blockstack/blockstack-core/graphs/contributors\n\n### What's the difference between Onename and Blockstack?\n\nOnename is the free Blockstack ID registrar run by Blockstack. It makes it easy to register your name and setup your profile. Once the name has been registered in Onename you can transfer it to a wallet you control, or leave it there and use it as you like.\n\n### How is Blockstack different from Namecoin?\n\nBlockstack DNS differs from Namecoin DNS in a few fundamental ways: blockchain layering, storage models, name pricing models, and incentives for miners. We wrote a post where you can learn more here: https://blockstack.org/docs/blockstack-vs-namecoin\n\n### I heard you guys were on Namecoin, what blockchain do you use now?\n\nWe use the Bitcoin blockchain for our source of truth.\n\n### How is Blockstack different from Ethereum for building decentralized apps?\n\nYou can think of Ethereum as a \"heavy\" blockchain that does everything for you. All the complexity is handled on-chain, computations are run there, and all scalability and security concerns need to be handled at the blockchain level. It amounts to a \"mainframe\" that runs all the applications in the ecosystem.\n\nBlockstack puts minimal logic into a blockchain and handles scalability outside of the blockchain by re-using existing internet infrastructure. Our architectural design mirrors how computing has developed; moving from mainframes to smaller networked entities.\n\nRead more about the differences between Blockstack and Ethereum dapps in the following forum post: https://forum.blockstack.org/t/what-is-the-difference-between-blockstack-and-ethereum/781/2\n\n### Can Blockstack only run on Bitcoin?\n\nThe model we're currently exploring is where Blockstack can process multiple blockchains to construct the global state where each namespace is tied to a single blockchain. Meaning that say the .id namespace is defined to run on Bitcoin and a .eth namespace is defined to run on Ethereum. Blockstack can process transactions from both blockchains and update the state of namespaces, but the consistency of any given namespace depends only on the underlying blockchain it was defined on.\n\n### Does Blockstack use a DHT (Distributed Hash Table)?\n\nIt does not, as of November 2016.  It uses a much more reliable system called the Atlas Network.  Details here: https://blog.blockstack.org/blockstack-core-v0-14-0-release-aad748f46d#.30gzlthdw\n\n### Can the Blockstack network fork?\n\nYes, the Blockstack network can fork if the underlying blockchain encounters a deep fork.  In this case, blockstack nodes on either side of the fork will diverge from one another.\n\nWe have yet to encounter a deep fork.  If this does happen, then Blockstack will use the virtualchain state on the majority fork once the fork resolves.\n\nWe also hard fork the network once a year to make protocol breaking changes and upgrade the network. The last one of these happened on block `488500` on the bitcoin blockchain. There are more details about the fork in this forum post: https://forum.blockstack.org/t/blockstack-annual-hard-fork-2017/1618\n\n### How is the Blockstack network upgraded over time? What parties need to agree on an upgrade?\n\nWe're working on an on-chain voting strategy similar to how mining works, where anyone can cast a vote proportional to the amount of Bitcoin burned.  Similar to how Bitcoin upgrades, a new feature will activate if a certain threshold (e.g. 80%) of votes consistently request its adoption over a given time interval (e.g. a couple weeks).\n\nUntil then, we will publicly announce the availability of new software, with the promise that each release will bring highly-desired features to make upgrading worth the users' whiles.\n\n### Can miners take down Blockstack?\n\n(coming soon)\n\n### Who gets the registration fees for name registrations?\n\nWith the current design, names are purchased by paying tribute with Bitcoin mining fees.\n\n### How long has the project been around? What does the current development roadmap look like?\n\nWork on the project started in late 2013. First public commits on the code are from Jan 2014. The first registrar for Blockstack was launched in March 2014 and the project has been growing since then. See this page for the current development roadmap\n\n### Who started the project? Who maintains it?\n\nThe project was started by two engineers from Princeton University. Muneeb Ali and Ryan Shea met at the Computer Science department at Princeton, where Muneeb was finishing his PhD and Ryan was running the enterprenurship club. In 2014, frustrated by the walled-gardens and security problems of the current internet they started working on a decentralized internet secured by blockchains. The project is currently maintained by Jude Nelson, Muneeb Ali, Ryan Shea, Larry Salibra, and Guy Lepage. A full list of contributors can be found [here](https://github.com/blockstack/blockstack-core/graphs/contributors) and [here](https://github.com/blockstack/blockstack-portal).\n\n### Where are the current core developers based? What are the requirements for being a core developer?\n\nMost of the core developers work in NYC and Hong Kong. Developers who've contributed to the [core open-source software](https://github.com/blockstack/blockstack-core) over a long enough time period, by default, get included in the list of core developers. There is no formal process for being part of this informal list. Core developers, generally, have the ability to write high-quality code, understand distributed systems and applied crypto, and share a vision of building a truly decentralized internet and are dedicated to that cause.\n\n### I heard some companies working on Blockstack have raised venture capital, how does that impact the project?\n\nBlockstack, like Linux, is an open-source project with a GPLv3 license for the core technology. Just like different companies build apps and services on top of Linux and have different individual business models, there are companies who're building apps & services for Blockstack on top of the core open-source technology and these companies have various business models and funding sources respectively. Having more venture-backed companies join the ecosystem for a decentralized internet is a good thing for everyone participating in the ecosystem including users and developers.\n\n### Can Blockstack control my data or ID when I use it?\n\nNo. When you're using a Blockstack client you control your data and ID with a private key. This private key never leaves your device and is meant to stay on your laptop/phone. As long as no one gets access to your private key, no one can control your data or ID. When you use Blockstack, by design, your private keys are never sent to any remote servers.\n\n### How long can I own my Blockstack ID?\n\nYou own your name for ~2 years. You have to renew every 2 years or it expires, and someone else can claim it.\n\n### Where is my data stored and how do I control who access it?\n\nYou control where your data is stored (you could run your own server, or use your own cloud storage - Dropbox, Amazon S3, and keep backups across all). You then use those places as locations pointed to by the URLs in your Blockstack ID's zone file. You can get the zone file with `blockstack lookup` in the CLI  (Check out the install video in our [CLI video tutorial series](https://www.youtube.com/playlist?list=PLXS8JJHIn4nGCU2uW85dHXpkQJ7QA5JkX). *need help on how users control who accesses the data*\n\n### Why should I trust the information, like name ownership or public key mappings, read from Blockstack?\n\nBlockstack records are extremely hard to tamper with. This is because the bindings for name ownership (names on Blockstack are owned by public keys) are announced in a proof-of-work blockchain (Bitcoin) and to change these binding an attacker will need to come up with a blockchain with more proof-of-work than the current Bitcoin blockchain but with a different history. Bitcoin's [current hash rate](https://blockchain.info/charts/hash-rate) makes this task almost impossible for non-state actors.  \n\n### Can anyone register a TLD?\n\nYes, anyone can register a TLD. If a TLD has not been registered already and you're willing to pay the registration fee for it, you can go ahead and register that TLD. There is no centralized party that can stop you from registering a TLD.\n\n### Do apps using Blockstack work with a regular browser?\n\nYes! Apps using Blockstack run in the web browsers you know and love. You will need to download and install Blockstack on your computer to use certain features of apps that use Blockstack.\n\n### Where can I discover apps using Blockstack?\n\nUsing the Blockstack Browser! Check our install page for more information: https://blockstack.org/install\n\n### What programming language can I use to build these apps?\n\nTo make apps that run in the web browser using Blockstack, you can use JavaScript and any of the same web frameworks or libraries you use today such as React, AngularJs, Vue.js or jQuery. The Blockstack Core is implementated in Python, but you can use any language you like for native apps as long as you are able to consume a JSON REST API.\n\n### What is the Blockstack Browser?\n\nThis is a developer-facing term used for the application users use to create and manage their identities and configure their storage. It also handles authentication requests from apps that allow their users to log in with Blockstack. When a user clicks a Log In with Blockstack button, they are redirected to the Blockstack Browser to approve the request before being logged into the app. The Browser is also where users can go to discover and use apps using Blockstack.\n\n### How do I get started using Blockstack to build decentralized applications?\n\nWe have a great tutorial on getting started building Blockstack applications: https://blockstack.org/tutorials/todo-list\n\n### Do I need to run a full Blockstack node to use Blockstack?\n\ntl;dr: You don't, but its very easy to.\n\nTo reduce the overhead involved in getting started we maintain a fleet of Blockstack Core nodes that your Blockstack applications connect to by default. If you want to run your own we provide detailed instructions on our [install page](https://blockstack.org/install). It only takes about 5-10 minutes to spin up your full node!\n\n### What is the capacity per block for registrations using Blockstack?\n\nInitial registrations can be done at an order of hundreds per block and once an identity is registered you can do “unlimited” updates to the data because that is off-chain. We’re also working on a more scalable solution where a very large number of identities can be registered but that’s not live yet and is in the pipeline as a rough benchmark. in summer 2015, Blockstack did 30,000+ identity registrations in a matter of few days live on the blockchain and Blockstack was actually throttling its servers and not taking up more than 100-200 transactions per block. It could’ve easily taken up more transactions without impacting the network.\n\n### What language is the Blockstack software written in?\n\nPython 2 and Node.js\n\n### What incentives are there to run a Blockstack node?\n\nRunning a Blockstack node keeps you secure by ensuring that your app gets the right names and public keys.  It's not expensive; it takes as much resources as a Chrome tab.\n\n### Can Blockstack apps scale, given that Blockstack uses blockchains which don't scale that well?\n\nYes.  Blockstack only uses the blockchain for name registration.  Everything else happens off-chain, so apps work just as fast as they do on the Web.\n\n### What if the current companies and developers working on Blockstack disappear, would the network keep running?\n\nYes, the Blockstack network will keep running. All of Blockstack's code is open-source and anyone can deploy Blockstack nodes or maintain the code. Further, Blockstack nodes don't need to coordinate with each other to function. Any node that a user deploys can function correctly independently.\n","title":"FAQ","description":"Review the questions most frequently asked about Blockstack.","image":"/images/article-photos/chalkboard.jpg"},"blockstack-rfcs":{},"roadmap":{}}