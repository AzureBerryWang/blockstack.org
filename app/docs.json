{"404":"# 404\n\nPage not found","app-developer-guide":"# App Developer Guide","basic-usage":"---\ntitle: Basic Usage\nnextUrl: /docs/extended-usage\nnextLabel: Extended Usage\nnextDescription: Dig deeper with Blockstack usage. Learn how to transfer names and more.\n---\n\n# Basic Usage\n\n### Lookups\n\nNow, to perform a name lookup, run this command:\n\n```bash\n$ blockstack lookup fredwilson.id\n```\n\nYou should get a response like this:\n\n```json\n{\n  \"data\": {\n    \"$origin\": \"fredwilson.id\",\n    \"$ttl\": \"3600\",\n    \"cname\": [{ \"name\": \"@\", \"alias\": \"https://zk9.s3.amazonaws.com\" }]\n  }\n}\n```\n\n### Cost Estimations\n\n```bash\n$ blockstack fee $(whoami).id\n```\n\nExample response:\n\n```json\n{\n  \"fee\": 0.01624,\n  \"registration_fee\": 0.016,\n  \"transaction_fee\": 0.00024\n}\n```\n\n### Registrations\n\nAfter you get comfortable with looking up names, take the next step and register and manage a name for yourself. Run the following command:\n\n```bash\n$ blockstack register <YOUR FULL NAME>.id\n```\n\nIf the name hasn’t been registered yet, you’ll get a confirmation that your registration is pending:\n\n```json\n{\n  \"message\": \"Name queued up for registration. Please expect a few hours for this process to be completed.\",\n  \"error\": false\n}\n```\n\nAfter a few hours, your registration should go through and you’ll be able to update your DNS records for the name.\n\n### Updates\n\nTo update the data record associated with a name you own, run the `blockstack update` command:\n\n```bash\n$ blockstack update '{ \"cname\": [{\"name\": \"@\", \"alias\": \"https://zk9.s3.amazonaws.com/yeezy.id\"}] }'\n```\n\nExpected response:\n\n```json\n{\n  \"message\": \"Data record updated.\",\n  \"error\": false\n}\n```","blockstack-vs-dns":"---\ntitle: Blockstack vs. Traditional DNS\nnextUrl: /docs/blockstack-vs-namecoin\nnextLabel: Blockstack vs Namecoin\nnextDescription: Learn about how Blockstack DNS differs from Namecoin.\n---\n\n# Blockstack vs. Traditional DNS\n\nWith the Blockstack software, a network of computers collectively maintain a global registry of domain names.\n\nIn this registry, each of the names has an owner, represented by a cryptographic keypair, and is associated with instructions for how browsers and other software should resolve the name.\n\nAs with the traditional domain name system, the Blockstack domain name system allows users to lookup, register, renew, and transfer names, as well as manage name resolution information.\n\nBut, Blockstack DNS differs in a few fundamental ways from traditional DNS.\n\nFirst, while the traditional domain name system is run by an international organization called ICANN, the Blockstack name registry is maintained in a completely decentralized way. It is run by everyone and it is controlled by no one, giving Blockstack DNS incredible and unprecedented technical and sociopolitical resilience.\n\nSecond, while traditional DNS relies on a fragile system of disseminating name resolution information, making it vulnerable to DNS cache poisoning, Blockstack DNS has a powerful mechanism for securely transmitting name resolution information that is 100% accurate.\n\nAnd last, Blockstack DNS and traditional DNS differ in how they associate names with certificates. Traditional DNS has no built-in system for securely associating names with cryptographic keypairs, so instead it relies on a hierarchy of anointed organizations to attest to the ownership of domains. Here, each organization represents a systemic threat to name resolution security. By comparison, in Blockstack DNS every name is automatically associated with a cryptographic keypair, allowing end-users to have trust in the authenticity of information sent by servers associated with the name.\n","blockstack-vs-namecoin":"---\ntitle: Blockstack vs. Namecoin\n---\n\n# Blockstack vs. Namecoin\n\nBlockstack DNS differs from Namecoin DNS in a few fundamental ways.\n\nFirst, they differ in how the domain name system is operated. Namecoin DNS is operated by nodes of a cryptocurrency called Namecoin, which is a fork of Bitcoin that has it's own separate blockchain. Blockstack DNS, meanwhile, is operated by nodes that read data from and write data to an underlying blockchain, which can be any blockchain that they are configured to operate on top of. The logic for operating the domain name system is decoupled from the logic of the underlying blockchain. This allows a Blockstack network to be configured to operate on any Blockchain in particular, and the main Blockstack network is currently operating on the most secure blockchain - the Bitcoin blockchain.\n\nSecond, with Namecoin DNS, routing information is stored directly in the blockchain, which can lead to quite a bit of blockchain bloat. Blockstack DNS, meanwhile, stores only hashes of routing information records in the blockchain, deciding to store the rest in decentralized content-addressable storage units (by default, Blockstack is configured to store data in a DHT). These routing records then can link to other data stored elsewhere, whether that be in a DHT or on a hosted data storage provider like S3. This makes for a much more scalable and cost-efficient design.\n\nThird, with Namecoin DNS, all names are set at the same low price and there are no options for users to create new namespaces and set their own name pricing schemes. This results in rampant squatting and significantly degrades the user experience for anyone trying to register names. Blockstack DNS, meanwhile, has a wide range of options for users to create their own namespaces and set their own name pricing schemes. Namespaces can be created with really cheap names (great for a username namespace) or they can be created with really expensive names (great for a domain namespace resilient to squatting). Name prices can be set to go down with an increase in the number of characters or with the presence of numbers and special characters. And names can be set to expire in a year or they can be set to never expire at all. All these options allow users to design namespaces that encourage registration of names that users want and are willing to pay for, while dis-incentivizing the mass registration of names by squatters. All this leads to a superior user experience for everyone involved.\n\nLast, Blockstack DNS has support for a bunch of really powerful features that Namecoin DNS simply does not. This includes support for multi-party ownership of names, support for light nodes (enabling secure lookups by mobile devices and desktop users with limited ability to run their own nodes), and support for creating namespaces with a pre-instantiated list of names (to facilitate migration of a namespace from another DNS system, like ICANN DNS).","contributor-guide":"# Contributor Guide\n","extended-usage":"---\ntitle: Extended Usage\nnextUrl: /docs/blockstack-vs-dns\nnextLabel: Blockstack vs Traditional DNS\nnextDescription: Learn about how Blockstack DNS differs from traditional ICANN DNS.\n---\n\n# Extended Usage\n\n### Transfers\n\nTo transfer a name that you own to another address, run the `blockstack transfer` command:\n\n```bash\n$ blockstack transfer <name> <recipient>\n```\n\nExpected response:\n\n```json\n{\n  \"message\": \"Name queued up for transfer.\",\n  \"error\": false\n}\n```\n\n### Renewals\n\nTo renew a name that you own, run the `blockstack renew` command:\n\n```bash\n$ blockstack renew <name>\n```\n\nExpected response:\n\n```json\n{\n  \"message\": \"Name queued up for renewal.\",\n  \"error\": false\n}\n```\n\n### Your Names\n\nTo get a list of the names you own, run the `blockstack names` command:\n\n```bash\n$ blockstack names\n```\n\nExpected response:\n\n```json\n{\n  \"names_owned\": [],\n  \"addresses\": [\n    { \"address\": \"1Jbcrh9Lkwm73jXyxramFukViEtktwq8gt\", \"names\": [] }\n  ]\n}\n```\n\n### Your Balance\n\nTo get your Bitcoin balance that can be used for name registrations, run the `blockstack balance` command:\n\n\n```bash\n$ blockstack balance\n```\n\nExpected response:\n\n```json\n{\n  \"balance\": 0.05,\n  \"addresses\": [\n    { \"address\": \"1EHgqHVpA1tjn6RhaVj8bx6y5NGvBwoMNS\", \"balance\": 0.05 }\n  ]\n}\n```\n\n### Importing\n\nTo import a name into your local name wallet or receive it from another sender, get your address with the `blockstack import` command:\n\n```bash\n$ blockstack import\n```\n\nExpected response:\n\n```json\n{\n  \"address\": \"1Jbcrh9Lkwm73jXyxramFukViEtktwq8gt\"\n}\n```\n\n### Whois Information\n\nTo get various information on a given name, including when it was registered and the address it is owned by, run the `blockstack whois` command:\n\n```bash\n$ blockstack whois fredwilson.id\n```\n\nExample response:\n\n```json\n{\n  \"block_preordered_at\": 374084,\n  \"block_renewed_at\": 374084,\n  \"owner_address\": \"1F2nHEDLRJ39XxAvSxwQhJsaVzvS5RHDRM\",\n  \"owner_public_keys\": [\"0411d88aa37a0eea476a5b63ca4b1cd392ded830865824c27dacef6bde9f9bc53fa13a0926533ef4d20397207e212c2086cbe13db5470fd29616abd35326d33090\"],\n  \"owner_script\": \"76a91499e7f97f5d2c77b4f32b4ed9ae0f0385c45aa5c788ac\",\n  \"preorder_transaction_id\": \"2986ec31ec957692d7f5bc58a3b02d2ac2d1a60039e9163365fc954ff51aeb5a\",\n  \"registered\": true\n}\n```\n\n### Blockstack Server Updates\n\nTo update the blockstack server that your command line is connecting to, use the `blockstack config` command:\n\n```bash\n$ blockstack config --server=server.blockstack.org --port=6264\n```\n\nExpected response:\n\n```json\n{\n  \"message\": \"Configuration settings updated.\",\n  \"error\": false\n}\n```","faq":"# FAQ\n\n### Why did you choose to build on top of Bitcoin?\n\nBitcoin is the blockchain with the most users, the largest market cap, the most amount of software available for it, and the highest amount of security (in terms of the cost of attack). It only makes sense to gravitate to the top blockchain among cryptocurrencies.\n\n### Are you open to building on other blockchains?\n\nYes! While we decided to follow our instincts and build our experimental KV store on the Bitcoin blockchain, we are and have been considering other options like alt-coins, sidechains, and even a Namecoin upgrade. If you have a suggestion and some detailed information about why it makes more sense, please open an issue and we'll discuss.\n\n### How is the Blockstore different from Namecoin?\n\nThis is different from Namecoin in a few fundamental ways:\n\n1. It uses the Bitcoin blockchain, which is the top blockchain. See above.\n2. Rather than store data directly in the Blockchain, this stores the data outside of the blockchain in a DHT. This reduces blockchain bloat and allows for more data to be conveniently stored.\n3. Each namespace has a different pricing scheme for names. That means you can use a namespace with expensive names in order to avoid squatting (ideal for domains), or you can use a namespace with names that cost almost nothing, in order to save money (ideal for non-fungible tokens like trading cards), or you can go for something in the middle (ideal for usernames).\n4. Fees paid to register names go to miners instead of being burned or essentially wasted. This incentivizes mining and increases the overall security of the network.\n\n### Is there a mechanism to store encrypted data?\n\nThere isn't any support for this in this repo. However, to store encrypted data, simply encrypt your file before submitting the data to the blockchain.\n\n### Can't someone just store huge files in the DHT?\n\nNo, we currently cap the size to 8kb. The DHT is not meant for storage of large files (e.g. pictures, videos, etc.) and is only intended for relatively small or moderately sized plaintext files.  Instead, we provide a [storage API](https://github.com/blockstack/blockstore/wiki/Data-Storage) in Blockstore to give users the ability to get, put, and delete large data from storage providers of their choosing.\n\n### Aren't DHTs vulnerable to sybil attacks?\n\nYes. Unfortunately like Bitcoin and other systems, sybil attacks are possible. There is no theoretical solution to sybil attacks, but we take certain practical steps to minimize the effects and risks of this. Also, keep in mind that the only type of attack possible on the DHT is the \"data unavailablity\" attack. Anyone can independently verify that they received the correct data by checking the hash of the data in the blockchain. \n\n### Can nodes just pop in and out and confuse the network?\n\nYes, with nodes entering and exiting a DHT (a process known as churn), the routing tables of the DHT can get affected. The DHT network will recover from this over time, so unless someone is actively attacking the DHT 24/7, occasional churn is going to be largely unnoticeable.\n\n### Is there any incentive to run a node?\n\nNot currently, no.  Only that anyone who turns on the DHT node feature in blockstored is also by default running a full DHT node. If you have any ideas about explicit incentives for running DHT nodes, feel free to reach out!\n\n### Is there a layer on top of the DHT that can make it simpler to grab the data?\n\nAnyone can create a cache of all the DHT data by using the index of the data from the blockchain. We plan on creating such caches (e.g., in memcached servers) and providing easy access to the data through an API. Remember that anyone can verify that the data they received is correct by checking the hash of the data in the blockchain (so you're not trusting the DHT or the cache server).\n\n### Can I build and host my own index/cache of the data in the DHT?\n\nAbsolutely! Anyone can. See above. \n\n### Is OP_RETURN the only way to embed the operation data in the blockchain?\n\nCurrently, yes. However, we recognize the potential to use multi-sig transaction outputs and standard pay-to-pubkey-hash transaction outputs. If you think it's a good idea to add these options, open an issue and we'll discuss it.\n\n### Why do I have to preorder a name before registering it?\n\nIf we didn't require a step before registration, someone could just see that you're broadcasting the registration of a particular name and race you to have their registration included in the next block. By separating the registration into two steps, we're able to support the pre-registration of an undisclosed name followed by the public confirmation of the registration of that name.\n\n### Isn't it essentially free for miners to register names?\n\nNo.  All registration fees, renewal fees, and namespace creation fees are sent to the burn address 1111111111111111111114oLvT2.\n\n### Is there support for names that don't ever expire?\n\nYes. Each namespace has it's own settings, so if you'd like to register names that don't expire, simply use a namespace that has a flag set for non-expiration.\n\n### If my I update my profile daily, my transaction costs will be high. Can I avoid this?\n\nThere are a few ways to avoid this. The first method is to put the somewhat consistent profile data in the main blob, then include a pointer to a JSON file that has the extended data. Profile explorers will read the data in the file as an extension of the main blob, so updating the file will let you update the profile data without issuing a new transaction and updating the hash associated with the name. You can learn more in the openname specifications repo.\n\n### Can a name be owned by a multi-sig address?\n\nAbsolutely. In this system, names are owned by scriptPubKeys, so all scriptPubKey types that Bitcoin supports are supported here.","index":"# Intro to Blockstack\n\nBlockstack is decentralized DNS.\n\nWhen you run a Blockstack node, you join a network of computers in maintaining a global registry of domain names that is more secure by design than traditional DNS and much more resilient to outside tampering and control.\n\nBlockstack gives you:\n\n- name lookups on a decentralized naming system\n- name registrations and transfers without centralized registrars\n- automatic binding of names to owning cryptographic keypairs\n- automatic cache invalidation\n- immunity to DNS cache poisoning\n- robust certificate pinning capabilities\n- resistence to censorship of name registration and resolution\n\nTo get started with Blockstack, read the installation and usage guides below.","installation":"---\ntitle: Installation\nnextUrl: /docs/basic-usage\nnextLabel: Basic Usage\nnextDescription: Explore the basic usage of Blockstack, including looking up and registering names.\n---\n\n# Installation\n\nThe quickest way to get started with Blockstack and get a glimpse of what it can do is to download the command line interface and perform a name lookup.\n\nInstalling the Blockstack command line interface is simple if you have pip. Just run the following command in your console:\n\n```bash\n$ pip install blockstack\n```\n\n### Alternative Installations\n\n#### Mac Users\n\nIf you're a mac user and would like an alternative to installing through pip, you can also install Blockstack with brew, as seen below.\n\n```bash\n$ brew install blockstack\n```\n\n#### Linux Users\n\nIf you're a linux user and would like an alternative to installing through pip, you can also install via apt-get.\n\nFirst, though, you'll need to add packages.blockstack.org to your sources list to tell apt-get where to get the blockstack package:\n\n```bash\n$ wget -O - http://packages.blockstack.org/jude@onename.com.gpg.key | sudo apt-key add -\n$ sudo -- sh -c 'echo \"deb http://packages.blockstack.org jessie main\" >> /etc/hosts'\n```\n\nNow, you may move on to installing blockstack via apt-get:\n\n```\n$ sudo apt-get update && sudo apt-get install blockstack\n```\n\nAfter your done installing blockstack, you should be ready to check out the usage section and give it a spin.\n","namespaces":"# Namespaces\n"}